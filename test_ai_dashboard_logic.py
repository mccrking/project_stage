#!/usr/bin/env python3
"""
Test de Coh√©rence Logique du Dashboard IA
V√©rifie que toutes les logiques du dashboard IA sont coh√©rentes
"""

import requests
import json
import time
from datetime import datetime

# Configuration
BASE_URL = "http://localhost:5000"
LOGIN_DATA = {
    "username": "admin",
    "password": "admin123"
}

def test_login():
    """Test de connexion"""
    print("üîê Test de connexion...")
    try:
        response = requests.post(f"{BASE_URL}/login", data=LOGIN_DATA, allow_redirects=False)
        if response.status_code == 302:  # Redirection apr√®s connexion r√©ussie
            print("‚úÖ Connexion r√©ussie")
            return response.cookies
        else:
            print(f"‚ùå √âchec de connexion: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return None

def test_ai_dashboard_access(cookies):
    """Test d'acc√®s au dashboard IA"""
    print("\nüìä Test d'acc√®s au dashboard IA...")
    try:
        response = requests.get(f"{BASE_URL}/ai-dashboard", cookies=cookies)
        if response.status_code == 200:
            print("‚úÖ Acc√®s au dashboard IA r√©ussi")
            return True
        else:
            print(f"‚ùå √âchec d'acc√®s: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur d'acc√®s: {e}")
        return False

def test_ai_statistics_consistency(cookies):
    """Test de coh√©rence des statistiques IA"""
    print("\nüìà Test de coh√©rence des statistiques IA...")
    try:
        response = requests.get(f"{BASE_URL}/api/ai/dashboard-stats", cookies=cookies)
        if response.status_code == 200:
            stats = response.json()
            print(f"üìä Statistiques r√©cup√©r√©es:")
            print(f"   - Score sant√© moyen: {stats.get('avg_health_score', 'N/A')}%")
            print(f"   - √âquipements critiques: {stats.get('critical_devices', 'N/A')}")
            print(f"   - Risque √©lev√©: {stats.get('high_risk_devices_count', 'N/A')}")
            print(f"   - Anomalies: {stats.get('anomaly_devices_count', 'N/A')}")
            
            # V√©rifications de coh√©rence
            issues = []
            
            # Score de sant√© doit √™tre entre 0 et 100
            if stats.get('avg_health_score', 0) < 0 or stats.get('avg_health_score', 0) > 100:
                issues.append("Score de sant√© moyen hors limites (0-100)")
            
            # Les compteurs doivent √™tre >= 0
            if stats.get('critical_devices', -1) < 0:
                issues.append("Nombre d'√©quipements critiques n√©gatif")
            if stats.get('high_risk_devices_count', -1) < 0:
                issues.append("Nombre d'√©quipements √† risque n√©gatif")
            if stats.get('anomaly_devices_count', -1) < 0:
                issues.append("Nombre d'anomalies n√©gatif")
            
            if issues:
                print("‚ö†Ô∏è  Probl√®mes de coh√©rence d√©tect√©s:")
                for issue in issues:
                    print(f"   - {issue}")
                return False
            else:
                print("‚úÖ Statistiques coh√©rentes")
                return True
        else:
            print(f"‚ùå √âchec r√©cup√©ration statistiques: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur statistiques: {e}")
        return False

def test_high_risk_devices_logic(cookies):
    """Test de la logique des √©quipements √† risque √©lev√©"""
    print("\n‚ö†Ô∏è  Test de la logique des √©quipements √† risque √©lev√©...")
    try:
        response = requests.get(f"{BASE_URL}/api/ai/high-risk-devices", cookies=cookies)
        if response.status_code == 200:
            devices = response.json()
            print(f"üìã {len(devices)} √©quipements √† risque √©lev√© trouv√©s")
            
            # V√©rifications de coh√©rence
            issues = []
            for device in devices:
                # Probabilit√© de panne doit √™tre > 0.6 (seuil configur√©)
                if device.get('failure_probability', 0) <= 0.6:
                    issues.append(f"√âquipement {device.get('ip', 'N/A')}: probabilit√© de panne <= 0.6")
                
                # Score de sant√© doit √™tre coh√©rent
                if device.get('health_score', 100) < 0 or device.get('health_score', 100) > 100:
                    issues.append(f"√âquipement {device.get('ip', 'N/A')}: score de sant√© hors limites")
            
            if issues:
                print("‚ö†Ô∏è  Probl√®mes de coh√©rence d√©tect√©s:")
                for issue in issues:
                    print(f"   - {issue}")
                return False
            else:
                print("‚úÖ Logique des √©quipements √† risque coh√©rente")
                return True
        else:
            print(f"‚ùå √âchec r√©cup√©ration √©quipements √† risque: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur √©quipements √† risque: {e}")
        return False

def test_anomaly_devices_logic(cookies):
    """Test de la logique des √©quipements avec anomalies"""
    print("\nüîç Test de la logique des √©quipements avec anomalies...")
    try:
        response = requests.get(f"{BASE_URL}/api/ai/anomaly-devices", cookies=cookies)
        if response.status_code == 200:
            devices = response.json()
            print(f"üìã {len(devices)} √©quipements avec anomalies trouv√©s")
            
            # V√©rifications de coh√©rence
            issues = []
            for device in devices:
                # Score d'anomalie doit √™tre < -0.5 (seuil configur√©)
                if device.get('anomaly_score', 0) >= -0.5:
                    issues.append(f"√âquipement {device.get('ip', 'N/A')}: score d'anomalie >= -0.5")
                
                # Score de sant√© doit √™tre coh√©rent
                if device.get('health_score', 100) < 0 or device.get('health_score', 100) > 100:
                    issues.append(f"√âquipement {device.get('ip', 'N/A')}: score de sant√© hors limites")
            
            if issues:
                print("‚ö†Ô∏è  Probl√®mes de coh√©rence d√©tect√©s:")
                for issue in issues:
                    print(f"   - {issue}")
                return False
            else:
                print("‚úÖ Logique des anomalies coh√©rente")
                return True
        else:
            print(f"‚ùå √âchec r√©cup√©ration anomalies: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur anomalies: {e}")
        return False

def test_chart_data_consistency(cookies):
    """Test de coh√©rence des donn√©es des graphiques"""
    print("\nüìä Test de coh√©rence des donn√©es des graphiques...")
    try:
        response = requests.get(f"{BASE_URL}/api/ai/chart-data", cookies=cookies)
        if response.status_code == 200:
            chart_data = response.json()
            
            # V√©rification des types d'√©quipements
            device_types = chart_data.get('device_types', {})
            if 'labels' in device_types and 'data' in device_types:
                print(f"üìà Types d'√©quipements: {len(device_types['labels'])} cat√©gories")
                
                # V√©rifier que les donn√©es correspondent aux labels
                if len(device_types['labels']) != len(device_types['data']):
                    print("‚ö†Ô∏è  Nombre de labels et donn√©es incoh√©rent pour les types d'√©quipements")
                    return False
            
            # V√©rification des scores de sant√©
            health_scores = chart_data.get('health_scores', {})
            if 'labels' in health_scores and 'data' in health_scores:
                print(f"üìà Scores de sant√©: {len(health_scores['labels'])} cat√©gories")
                
                # V√©rifier que les donn√©es correspondent aux labels
                if len(health_scores['labels']) != len(health_scores['data']):
                    print("‚ö†Ô∏è  Nombre de labels et donn√©es incoh√©rent pour les scores de sant√©")
                    return False
                
                # V√©rifier que la somme des √©quipements est coh√©rente
                total_devices = sum(health_scores['data'])
                print(f"üìä Total √©quipements dans le graphique: {total_devices}")
            
            print("‚úÖ Donn√©es des graphiques coh√©rentes")
            return True
        else:
            print(f"‚ùå √âchec r√©cup√©ration donn√©es graphiques: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur donn√©es graphiques: {e}")
        return False

def test_ai_recommendations_logic(cookies):
    """Test de la logique des recommandations IA"""
    print("\nüí° Test de la logique des recommandations IA...")
    try:
        response = requests.post(f"{BASE_URL}/api/ai/recommendations", cookies=cookies)
        if response.status_code == 200:
            result = response.json()
            if result.get('status') == 'success':
                recommendations = result.get('recommendations', [])
                print(f"üí° {len(recommendations)} recommandations g√©n√©r√©es")
                
                # V√©rifications de coh√©rence
                issues = []
                for rec in recommendations:
                    # V√©rifier les champs requis
                    required_fields = ['device_ip', 'message', 'priority', 'actions']
                    for field in required_fields:
                        if field not in rec:
                            issues.append(f"Recommandation manque le champ: {field}")
                    
                    # V√©rifier la priorit√©
                    valid_priorities = ['critical', 'high', 'medium', 'low']
                    if rec.get('priority') not in valid_priorities:
                        issues.append(f"Priorit√© invalide: {rec.get('priority')}")
                
                if issues:
                    print("‚ö†Ô∏è  Probl√®mes de coh√©rence d√©tect√©s:")
                    for issue in issues:
                        print(f"   - {issue}")
                    return False
                else:
                    print("‚úÖ Logique des recommandations coh√©rente")
                    return True
            else:
                print(f"‚ùå √âchec g√©n√©ration recommandations: {result.get('message', 'Erreur inconnue')}")
                return False
        else:
            print(f"‚ùå √âchec requ√™te recommandations: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur recommandations: {e}")
        return False

def test_ai_analysis_consistency(cookies):
    """Test de coh√©rence de l'analyse IA"""
    print("\nüß† Test de coh√©rence de l'analyse IA...")
    try:
        # R√©cup√©rer un √©quipement pour test
        response = requests.get(f"{BASE_URL}/api/devices", cookies=cookies)
        if response.status_code == 200:
            devices = response.json()
            if devices:
                test_device = devices[0]
                device_id = test_device.get('id')
                
                # Analyser l'√©quipement
                analysis_response = requests.get(f"{BASE_URL}/api/device/{device_id}/ai-analysis", cookies=cookies)
                if analysis_response.status_code == 200:
                    analysis = analysis_response.json()
                    
                    # V√©rifications de coh√©rence
                    issues = []
                    
                    # Score de sant√© doit √™tre entre 0 et 100
                    health_score = analysis.get('health_score', 0)
                    if health_score < 0 or health_score > 100:
                        issues.append(f"Score de sant√© hors limites: {health_score}")
                    
                    # Confiance IA doit √™tre entre 0 et 1
                    ai_confidence = analysis.get('ai_confidence', 0)
                    if ai_confidence < 0 or ai_confidence > 1:
                        issues.append(f"Confiance IA hors limites: {ai_confidence}")
                    
                    # Probabilit√© de panne doit √™tre entre 0 et 1
                    failure_prob = analysis.get('maintenance_analysis', {}).get('failure_probability', 0)
                    if failure_prob < 0 or failure_prob > 1:
                        issues.append(f"Probabilit√© de panne hors limites: {failure_prob}")
                    
                    if issues:
                        print("‚ö†Ô∏è  Probl√®mes de coh√©rence d√©tect√©s:")
                        for issue in issues:
                            print(f"   - {issue}")
                        return False
                    else:
                        print("‚úÖ Analyse IA coh√©rente")
                        return True
                else:
                    print(f"‚ùå √âchec analyse IA: {analysis_response.status_code}")
                    return False
            else:
                print("‚ö†Ô∏è  Aucun √©quipement disponible pour test")
                return True
        else:
            print(f"‚ùå √âchec r√©cup√©ration √©quipements: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur analyse IA: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üîç TEST DE COH√âRENCE LOGIQUE DU DASHBOARD IA")
    print("=" * 50)
    
    # Test de connexion
    cookies = test_login()
    if not cookies:
        print("\n‚ùå Impossible de continuer sans connexion")
        return
    
    print(f"üç™ Cookies de session: {cookies}")
    
    # Tests de coh√©rence
    tests = [
        test_ai_dashboard_access,
        test_ai_statistics_consistency,
        test_high_risk_devices_logic,
        test_anomaly_devices_logic,
        test_chart_data_consistency,
        test_ai_recommendations_logic,
        test_ai_analysis_consistency
    ]
    
    results = []
    for test in tests:
        try:
            result = test(cookies)
            results.append(result)
        except Exception as e:
            print(f"‚ùå Erreur lors du test: {e}")
            results.append(False)
    
    # R√©sum√©
    print("\n" + "=" * 50)
    print("üìã R√âSUM√â DES TESTS DE COH√âRENCE")
    print("=" * 50)
    
    passed = sum(results)
    total = len(results)
    
    print(f"‚úÖ Tests r√©ussis: {passed}/{total}")
    print(f"‚ùå Tests √©chou√©s: {total - passed}/{total}")
    
    if passed == total:
        print("\nüéâ TOUS LES TESTS DE COH√âRENCE SONT PASS√âS!")
        print("‚úÖ Le dashboard IA est logiquement coh√©rent")
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} PROBL√àME(S) DE COH√âRENCE D√âTECT√â(S)")
        print("üîß Des corrections sont n√©cessaires")
    
    print(f"\nüìÖ Test effectu√© le: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main() 