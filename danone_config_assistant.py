#!/usr/bin/env python3
"""
Interface Interactive de Configuration - Version Danone
Permet au technicien de configurer facilement la surveillance r√©seau
"""

import json
import os
from datetime import datetime
from device_selection_helper import DeviceSelectionHelper

class DanoneDeviceConfiguration:
    """Interface de configuration sp√©cialis√©e pour l'environnement Danone"""
    
    def __init__(self):
        self.helper = DeviceSelectionHelper()
        self.config_file = "danone_monitoring_config.json"
        
    def run_interactive_setup(self):
        """Lance la configuration interactive compl√®te"""
        print("üè≠ CONFIGURATION SURVEILLANCE R√âSEAU - DANONE")
        print("=" * 60)
        print("Cet assistant va vous aider √† configurer la surveillance")
        print("de vos √©quipements r√©seau de mani√®re simple et rapide.")
        print("=" * 60)
        
        # √âtape 1: D√©couverte automatique
        print("\nüîç √âTAPE 1: D√âCOUVERTE AUTOMATIQUE")
        print("-" * 40)
        
        discovered_devices = self.helper.auto_discover_with_classification()
        total_devices = sum(len(devices) for devices in discovered_devices.values())
        
        if total_devices == 0:
            print("‚ùå Aucun √©quipement d√©tect√©. V√©rifiez votre connexion r√©seau.")
            return None
        
        print(f"\n‚úÖ {total_devices} √©quipements d√©couverts!")
        
        # √âtape 2: Affichage par cat√©gories
        print("\nüìä √âTAPE 2: CLASSIFICATION DES √âQUIPEMENTS")
        print("-" * 40)
        
        self._display_discovered_devices(discovered_devices)
        
        # √âtape 3: S√©lection interactive
        print("\nüéØ √âTAPE 3: S√âLECTION DES √âQUIPEMENTS √Ä SURVEILLER")
        print("-" * 40)
        
        selected_devices = self._interactive_device_selection(discovered_devices)
        
        if not selected_devices:
            print("‚ö†Ô∏è Aucun √©quipement s√©lectionn√©.")
            return None
        
        # √âtape 4: Configuration des param√®tres
        print(f"\n‚öôÔ∏è √âTAPE 4: CONFIGURATION DES PARAM√àTRES")
        print("-" * 40)
        
        config = self._configure_monitoring_settings(selected_devices)
        
        # √âtape 5: Sauvegarde
        print(f"\nüíæ √âTAPE 5: SAUVEGARDE DE LA CONFIGURATION")
        print("-" * 40)
        
        if self._save_final_configuration(config):
            print(f"\nüéâ CONFIGURATION TERMIN√âE AVEC SUCC√àS!")
            print(f"üìÅ Fichier de configuration: {self.config_file}")
            print(f"üöÄ La surveillance est maintenant configur√©e pour {len(selected_devices)} √©quipements")
            return config
        
        return None
    
    def _display_discovered_devices(self, classified_devices):
        """Affiche les √©quipements d√©couverts par cat√©gorie"""
        
        categories = {
            'critical': 'üö® √âQUIPEMENTS CRITIQUES',
            'important': '‚ö° √âQUIPEMENTS IMPORTANTS', 
            'monitoring': 'üìπ √âQUIPEMENTS DE SURVEILLANCE',
            'standard': 'üíª √âQUIPEMENTS STANDARD'
        }
        
        for category, title in categories.items():
            devices = classified_devices.get(category, [])
            if devices:
                print(f"\n{title} ({len(devices)} √©quipements):")
                for i, device in enumerate(devices, 1):
                    status = "üü¢" if device.get('is_online') else "üî¥"
                    print(f"  {i:2d}. {status} {device['ip']:15} - {device['hostname'][:30]} [{device['type']}]")
        
        # R√©sum√©
        total = sum(len(devices) for devices in classified_devices.values())
        print(f"\nüìä R√âSUM√â: {total} √©quipements d√©couverts")
        for category, devices in classified_devices.items():
            if devices:
                print(f"  - {categories[category]}: {len(devices)}")
    
    def _interactive_device_selection(self, classified_devices):
        """Interface de s√©lection interactive"""
        
        selected_devices = []
        
        # Auto-s√©lection des √©quipements critiques et importants
        auto_select = classified_devices.get('critical', []) + classified_devices.get('important', [])
        
        if auto_select:
            print(f"\n‚úÖ S√âLECTION AUTOMATIQUE:")
            print(f"Les {len(auto_select)} √©quipements critiques/importants seront surveill√©s automatiquement:")
            for device in auto_select:
                print(f"  ‚Ä¢ {device['ip']} - {device['hostname']} [{device['type']}]")
            selected_devices.extend(auto_select)
        
        # S√©lection manuelle pour les autres cat√©gories  
        other_devices = classified_devices.get('monitoring', []) + classified_devices.get('standard', [])
        
        if other_devices:
            print(f"\n‚ùì S√âLECTION MANUELLE ({len(other_devices)} √©quipements disponibles):")
            print("Souhaitez-vous surveiller d'autres √©quipements ? (o/n):", end=" ")
            
            try:
                choice = input().lower().strip()
                if choice in ['o', 'oui', 'y', 'yes']:
                    selected_additional = self._manual_device_selection(other_devices)
                    selected_devices.extend(selected_additional)
            except (EOFError, KeyboardInterrupt):
                print("\nS√©lection automatique uniquement.")
        
        return selected_devices
    
    def _manual_device_selection(self, devices):
        """S√©lection manuelle d'√©quipements"""
        
        selected = []
        
        print(f"\nListe des √©quipements disponibles:")
        for i, device in enumerate(devices, 1):
            status = "üü¢" if device.get('is_online') else "üî¥"
            print(f"  {i:2d}. {status} {device['ip']:15} - {device['hostname'][:30]} [{device['type']}]")
        
        print(f"\nEntrez les num√©ros des √©quipements √† surveiller (ex: 1,3,5) ou 'tous' pour tous:")
        print("Ou appuyez sur Entr√©e pour passer:", end=" ")
        
        try:
            choice = input().strip()
            
            if choice.lower() in ['tous', 'all', '*']:
                selected = devices.copy()
                print(f"‚úÖ Tous les {len(devices)} √©quipements s√©lectionn√©s")
            
            elif choice:
                # Parse des num√©ros
                try:
                    numbers = [int(x.strip()) for x in choice.split(',')]
                    for num in numbers:
                        if 1 <= num <= len(devices):
                            selected.append(devices[num-1])
                    
                    print(f"‚úÖ {len(selected)} √©quipements s√©lectionn√©s")
                    
                except ValueError:
                    print("‚ö†Ô∏è Format invalide. Aucune s√©lection.")
            
        except (EOFError, KeyboardInterrupt):
            print("\nAucune s√©lection manuelle.")
        
        return selected
    
    def _configure_monitoring_settings(self, selected_devices):
        """Configuration des param√®tres de surveillance"""
        
        print(f"Configuration automatique des param√®tres pour {len(selected_devices)} √©quipements...")
        
        # G√©n√©ration de la configuration optimis√©e
        config = self.helper.create_configuration_template(selected_devices)
        
        # Configuration sp√©cifique Danone
        config['danone_config'] = {
            'plant_name': 'Usine Danone',
            'configured_by': 'Technicien IT',
            'configuration_date': datetime.now().isoformat(),
            'environment': 'production',
            'email_notifications': True,
            'sms_notifications': False,
            'report_frequency': 'daily'
        }
        
        # Affichage du r√©sum√©
        self.helper.print_configuration_summary(config)
        
        return config
    
    def _save_final_configuration(self, config):
        """Sauvegarde la configuration finale"""
        
        try:
            # Sauvegarde principale
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            
            # Sauvegarde de backup avec timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_file = f"backup_config_{timestamp}.json"
            
            with open(backup_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ Configuration sauvegard√©e:")
            print(f"   üìÑ Principal: {self.config_file}")
            print(f"   üíæ Backup: {backup_file}")
            
            # G√©n√©ration du fichier r√©sum√© pour le technicien
            self._generate_summary_report(config)
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde: {e}")
            return False
    
    def _generate_summary_report(self, config):
        """G√©n√®re un rapport r√©sum√© pour le technicien"""
        
        devices = config['monitoring_config']['devices']
        danone_config = config.get('danone_config', {})
        
        report = f"""
RAPPORT DE CONFIGURATION - SURVEILLANCE R√âSEAU DANONE
=====================================================
Date de configuration: {danone_config.get('configuration_date', 'N/A')}
Configur√© par: {danone_config.get('configured_by', 'N/A')}
Environnement: {danone_config.get('environment', 'N/A')}

R√âSUM√â DE LA SURVEILLANCE:
- √âquipements surveill√©s: {len(devices)}
- R√©seaux couverts: {len(config['monitoring_config']['networks_monitored'])}
- Notifications email: {'Activ√©es' if danone_config.get('email_notifications') else 'D√©sactiv√©es'}
- Fr√©quence des rapports: {danone_config.get('report_frequency', 'N/A')}

√âQUIPEMENTS CONFIGUR√âS:
"""
        
        for i, device in enumerate(devices, 1):
            report += f"""
{i:2d}. {device['ip']:15} - {device['hostname'][:30]}
    Type: {device['type']}
    Priorit√©: {device['priority']}
    Seuil de r√©ponse: {device['alert_config']['response_time_threshold']}ms
    Intervalle de scan: {device['scan_interval']}s
    Ports surveill√©s: {', '.join(map(str, device['monitoring_ports'][:3]))}{'...' if len(device['monitoring_ports']) > 3 else ''}
"""
        
        report += f"""
PROCHAINES √âTAPES:
1. Importez le fichier '{self.config_file}' dans votre syst√®me de surveillance
2. Configurez vos param√®tres email dans l'interface web
3. Testez les notifications d'alerte
4. Planifiez la maintenance pr√©ventive

SUPPORT TECHNIQUE:
En cas de probl√®me, consultez la documentation ou contactez l'√©quipe IT.
"""
        
        # Sauvegarder le rapport
        report_file = "rapport_configuration_danone.txt"
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write(report)
            print(f"   üìã Rapport: {report_file}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur g√©n√©ration rapport: {e}")

def main():
    """Point d'entr√©e principal"""
    configurator = DanoneDeviceConfiguration()
    config = configurator.run_interactive_setup()
    
    if config:
        print(f"\nüéØ CONFIGURATION R√âUSSIE!")
        print(f"Votre syst√®me de surveillance est maintenant pr√™t √† fonctionner.")
    else:
        print(f"\n‚ö†Ô∏è Configuration incompl√®te.")
        print(f"Relancez l'assistant si n√©cessaire.")

if __name__ == "__main__":
    main()
