#!/usr/bin/env python3
"""
Script de d√©monstration de la page Param√®tres
Montre toutes les fonctionnalit√©s de la page param√®tres
"""
import requests
import json
import time
from datetime import datetime, timedelta

# Configuration
BASE_URL = "http://localhost:5000"
LOGIN_DATA = {
    'username': 'admin',
    'password': 'admin123'
}

def login():
    """Connexion √† l'application"""
    print("üîê Connexion √† l'application...")
    response = requests.post(f"{BASE_URL}/login", data=LOGIN_DATA, allow_redirects=False)
    if response.status_code == 302:
        print("‚úÖ Connexion r√©ussie")
        return response.cookies
    else:
        print(f"‚ùå √âchec de la connexion: {response.status_code}")
        return None

def display_settings_overview(cookies):
    """Afficher un aper√ßu des param√®tres actuels"""
    print("\n‚öôÔ∏è APER√áU DES PARAM√àTRES ACTUELS")
    print("-" * 40)
    
    # R√©cup√©rer les param√®tres r√©seau
    response = requests.get(f"{BASE_URL}/api/settings", cookies=cookies)
    if response.status_code == 200:
        settings = response.json()
        print("üìã Configuration r√©seau:")
        print(f"   ‚Ä¢ Plage r√©seau: {settings.get('network_range', 'N/A')}")
        print(f"   ‚Ä¢ Intervalle scan: {settings.get('scan_interval', 'N/A')} secondes")
        print(f"   ‚Ä¢ Timeout scan: {settings.get('scan_timeout', 'N/A')} secondes")
        print(f"   ‚Ä¢ R√©seaux production: {len(settings.get('production_networks', []))}")
        print(f"   ‚Ä¢ Entra√Ænement IA: {settings.get('ai_training_interval', 'N/A')} secondes")
    
    # R√©cup√©rer la configuration email
    response = requests.get(f"{BASE_URL}/api/settings/email", cookies=cookies)
    if response.status_code == 200:
        email_settings = response.json()
        if 'error' not in email_settings:
            print("\nüìß Configuration email:")
            print(f"   ‚Ä¢ Activ√©: {'Oui' if email_settings.get('enabled') else 'Non'}")
            print(f"   ‚Ä¢ Serveur SMTP: {email_settings.get('smtp_server', 'N/A')}")
            print(f"   ‚Ä¢ Port: {email_settings.get('smtp_port', 'N/A')}")
            print(f"   ‚Ä¢ Email destination: {email_settings.get('to_email', 'N/A')}")

def demonstrate_network_settings(cookies):
    """D√©montrer la configuration r√©seau"""
    print("\nüåê D√âMONSTRATION DE LA CONFIGURATION R√âSEAU")
    print("-" * 40)
    
    # R√©cup√©rer les r√©seaux disponibles
    response = requests.get(f"{BASE_URL}/api/settings/networks", cookies=cookies)
    if response.status_code == 200:
        data = response.json()
        if data.get('status') == 'success':
            networks = data.get('networks', [])
            production_networks = data.get('production_networks', [])
            
            print("üì° R√©seaux d√©couverts:")
            for i, network in enumerate(networks[:5], 1):  # Limiter √† 5
                print(f"   {i}. {network}")
            
            print(f"\nüè≠ R√©seaux production Central Danone ({len(production_networks)}):")
            for network in production_networks:
                print(f"   ‚Ä¢ {network}")
    
    # Tester diff√©rents param√®tres r√©seau
    test_configs = [
        {
            'name': 'Configuration rapide',
            'settings': {
                'network_range': '192.168.1.0/24',
                'scan_interval': 300,  # 5 minutes
                'scan_timeout': 5,
                'max_retries': 1,
                'enable_auto_scan': True
            }
        },
        {
            'name': 'Configuration compl√®te',
            'settings': {
                'network_range': '192.168.1.0/24',
                'scan_interval': 600,  # 10 minutes
                'scan_timeout': 10,
                'max_retries': 3,
                'enable_auto_scan': True
            }
        }
    ]
    
    for config in test_configs:
        print(f"\nüîÑ Test: {config['name']}")
        response = requests.post(
            f"{BASE_URL}/api/settings",
            json=config['settings'],
            cookies=cookies
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('status') == 'success':
                print(f"   ‚úÖ {config['name']} appliqu√©e avec succ√®s")
            else:
                print(f"   ‚ùå Erreur: {data.get('error', 'Erreur inconnue')}")
        else:
            print(f"   ‚ùå Erreur HTTP: {response.status_code}")

def demonstrate_network_testing(cookies):
    """D√©montrer les tests r√©seau"""
    print("\nüîç D√âMONSTRATION DES TESTS R√âSEAU")
    print("-" * 40)
    
    test_networks = [
        '192.168.1.0/24',
        '192.168.2.0/24',
        '10.0.0.0/24'
    ]
    
    for network in test_networks:
        print(f"\nüåê Test du r√©seau: {network}")
        
        response = requests.post(
            f"{BASE_URL}/api/settings/test-network",
            json={'network_range': network},
            cookies=cookies
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('status') == 'success':
                devices_found = data.get('devices_found', 0)
                devices = data.get('devices', [])
                
                print(f"   ‚úÖ Appareils trouv√©s: {devices_found}")
                if devices:
                    print("   üì± Aper√ßu des appareils:")
                    for device in devices[:3]:  # Limiter √† 3
                        print(f"      ‚Ä¢ {device.get('ip', 'N/A')} - {device.get('hostname', 'N/A')}")
            else:
                print(f"   ‚ùå Erreur: {data.get('error', 'Erreur inconnue')}")
        else:
            print(f"   ‚ùå Erreur HTTP: {response.status_code}")

def demonstrate_alert_settings(cookies):
    """D√©montrer la configuration des alertes"""
    print("\nüö® D√âMONSTRATION DE LA CONFIGURATION DES ALERTES")
    print("-" * 40)
    
    alert_configs = [
        {
            'name': 'Configuration standard',
            'settings': {
                'alert_threshold': 85,
                'alert_device_offline': True,
                'alert_device_online': True,
                'alert_low_uptime': True,
                'alert_scan_failed': False
            }
        },
        {
            'name': 'Configuration critique',
            'settings': {
                'alert_threshold': 95,
                'alert_device_offline': True,
                'alert_device_online': False,
                'alert_low_uptime': True,
                'alert_scan_failed': True
            }
        }
    ]
    
    for config in alert_configs:
        print(f"\n‚öôÔ∏è {config['name']}:")
        settings = config['settings']
        print(f"   ‚Ä¢ Seuil d'alerte: {settings['alert_threshold']}%")
        print(f"   ‚Ä¢ Appareil hors ligne: {'Oui' if settings['alert_device_offline'] else 'Non'}")
        print(f"   ‚Ä¢ Appareil en ligne: {'Oui' if settings['alert_device_online'] else 'Non'}")
        print(f"   ‚Ä¢ Disponibilit√© faible: {'Oui' if settings['alert_low_uptime'] else 'Non'}")
        print(f"   ‚Ä¢ √âchec de scan: {'Oui' if settings['alert_scan_failed'] else 'Non'}")
        
        # Sauvegarder la configuration
        response = requests.post(
            f"{BASE_URL}/api/settings/save",
            json=settings,
            cookies=cookies
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('status') == 'success':
                print(f"   ‚úÖ {config['name']} sauvegard√©e")
            else:
                print(f"   ‚ùå Erreur: {data.get('error', 'Erreur inconnue')}")
        else:
            print(f"   ‚ùå Erreur HTTP: {response.status_code}")

def demonstrate_email_configuration(cookies):
    """D√©montrer la configuration email"""
    print("\nüìß D√âMONSTRATION DE LA CONFIGURATION EMAIL")
    print("-" * 40)
    
    # Configurations email de test
    email_configs = [
        {
            'name': 'Configuration Gmail',
            'settings': {
                'enabled': True,
                'smtp_server': 'smtp.gmail.com',
                'smtp_port': 587,
                'username': 'supervision.centraldanone@gmail.com',
                'password': 'app_password_here',
                'from_email': 'supervision@centraldanone.com',
                'to_email': 'admin@centraldanone.com'
            }
        },
        {
            'name': 'Configuration Outlook',
            'settings': {
                'enabled': True,
                'smtp_server': 'smtp-mail.outlook.com',
                'smtp_port': 587,
                'username': 'supervision@centraldanone.com',
                'password': 'password_here',
                'from_email': 'supervision@centraldanone.com',
                'to_email': 'mehdi.chmiti2000@gmail.com'
            }
        }
    ]
    
    for config in email_configs:
        print(f"\nüìß {config['name']}:")
        settings = config['settings']
        print(f"   ‚Ä¢ Serveur: {settings['smtp_server']}:{settings['smtp_port']}")
        print(f"   ‚Ä¢ Utilisateur: {settings['username']}")
        print(f"   ‚Ä¢ De: {settings['from_email']}")
        print(f"   ‚Ä¢ √Ä: {settings['to_email']}")
        
        # Sauvegarder la configuration
        response = requests.post(
            f"{BASE_URL}/api/settings/email",
            json=settings,
            cookies=cookies
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('status') == 'success':
                print(f"   ‚úÖ {config['name']} sauvegard√©e")
                
                # Tester la configuration
                print(f"   üß™ Test de la configuration...")
                test_response = requests.post(
                    f"{BASE_URL}/api/settings/email/test",
                    cookies=cookies
                )
                
                if test_response.status_code == 200:
                    test_data = test_response.json()
                    if test_data.get('status') == 'success':
                        print(f"   ‚úÖ Test r√©ussi")
                    else:
                        print(f"   ‚ùå Test √©chou√©: {test_data.get('message', 'Erreur inconnue')}")
                else:
                    print(f"   ‚ùå Erreur test: {test_response.status_code}")
            else:
                print(f"   ‚ùå Erreur: {data.get('error', 'Erreur inconnue')}")
        else:
            print(f"   ‚ùå Erreur HTTP: {response.status_code}")

def demonstrate_test_alerts(cookies):
    """D√©montrer les tests d'alertes"""
    print("\nüö® D√âMONSTRATION DES TESTS D'ALERTES")
    print("-" * 40)
    
    test_alerts = [
        {
            'name': 'Alerte critique',
            'data': {
                'subject': 'ALERTE CRITIQUE - √âquipement hors ligne',
                'message': 'L\'√©quipement 192.168.1.100 est hors ligne depuis plus de 30 minutes. Intervention imm√©diate requise.',
                'priority': 'critical'
            }
        },
        {
            'name': 'Alerte de maintenance',
            'data': {
                'subject': 'Maintenance pr√©ventive recommand√©e',
                'message': 'L\'√©quipement 192.168.2.50 pr√©sente des signes de d√©gradation. Maintenance pr√©ventive recommand√©e dans les 48h.',
                'priority': 'medium'
            }
        },
        {
            'name': 'Rapport quotidien',
            'data': {
                'subject': 'Rapport quotidien - Central Danone',
                'message': 'Rapport quotidien de supervision r√©seau Central Danone. Disponibilit√©: 98.5%, √âquipements en ligne: 45/46.',
                'priority': 'low'
            }
        }
    ]
    
    for alert in test_alerts:
        print(f"\nüì§ Envoi: {alert['name']}")
        
        response = requests.post(
            f"{BASE_URL}/api/settings/email/alert",
            json=alert['data'],
            cookies=cookies
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('status') == 'success':
                print(f"   ‚úÖ {alert['name']} envoy√©e avec succ√®s")
            else:
                print(f"   ‚ùå Erreur: {data.get('message', 'Erreur inconnue')}")
        else:
            print(f"   ‚ùå Erreur HTTP: {response.status_code}")
        
        time.sleep(1)  # Pause entre les envois

def demonstrate_report_settings(cookies):
    """D√©montrer la configuration des rapports"""
    print("\nüìä D√âMONSTRATION DE LA CONFIGURATION DES RAPPORTS")
    print("-" * 40)
    
    report_configs = [
        {
            'name': 'Rapport journalier',
            'settings': {
                'auto_report': 'daily',
                'report_format': 'pdf',
                'report_time': '08:00',
                'report_retention': 30,
                'include_charts': True,
                'include_alerts': True
            }
        },
        {
            'name': 'Rapport hebdomadaire',
            'settings': {
                'auto_report': 'weekly',
                'report_format': 'excel',
                'report_time': '09:00',
                'report_retention': 90,
                'include_charts': True,
                'include_alerts': True
            }
        }
    ]
    
    for config in report_configs:
        print(f"\nüìã {config['name']}:")
        settings = config['settings']
        print(f"   ‚Ä¢ Type: {settings['auto_report']}")
        print(f"   ‚Ä¢ Format: {settings['report_format'].upper()}")
        print(f"   ‚Ä¢ Heure: {settings['report_time']}")
        print(f"   ‚Ä¢ R√©tention: {settings['report_retention']} jours")
        print(f"   ‚Ä¢ Graphiques: {'Oui' if settings['include_charts'] else 'Non'}")
        print(f"   ‚Ä¢ Alertes: {'Oui' if settings['include_alerts'] else 'Non'}")
        
        # Sauvegarder la configuration
        response = requests.post(
            f"{BASE_URL}/api/settings/save",
            json=settings,
            cookies=cookies
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('status') == 'success':
                print(f"   ‚úÖ {config['name']} configur√©")
            else:
                print(f"   ‚ùå Erreur: {data.get('error', 'Erreur inconnue')}")
        else:
            print(f"   ‚ùå Erreur HTTP: {response.status_code}")

def demonstrate_system_actions(cookies):
    """D√©montrer les actions syst√®me"""
    print("\nüñ•Ô∏è D√âMONSTRATION DES ACTIONS SYST√àME")
    print("-" * 40)
    
    actions = [
        {
            'name': 'Sauvegarde de la base de donn√©es',
            'description': 'Cr√©ation d\'une sauvegarde compl√®te de la base de donn√©es'
        },
        {
            'name': 'Vider le cache',
            'description': 'Nettoyage du cache syst√®me pour am√©liorer les performances'
        },
        {
            'name': 'R√©initialiser les param√®tres',
            'description': 'Retour aux param√®tres par d√©faut (ATTENTION: action irr√©versible)'
        }
    ]
    
    for action in actions:
        print(f"\n‚öôÔ∏è {action['name']}:")
        print(f"   üìù {action['description']}")
        print(f"   ‚ÑπÔ∏è  Cette action est disponible via l'interface web")
        print(f"   üîß Utilisez le bouton correspondant dans la section 'Actions syst√®me'")

def demonstrate_page_features(cookies):
    """D√©montrer les fonctionnalit√©s de la page"""
    print("\nüéØ FONCTIONNALIT√âS DE LA PAGE PARAM√àTRES")
    print("-" * 40)
    
    response = requests.get(f"{BASE_URL}/settings", cookies=cookies)
    if response.status_code == 200:
        content = response.text
        
        features = [
            ("Configuration r√©seau", "Configuration r√©seau"),
            ("Plage r√©seau", "Plage r√©seau √† scanner"),
            ("Intervalle de scan", "Intervalle de scan"),
            ("Timeout de scan", "Timeout de scan"),
            ("Scan automatique", "Activer le scan automatique"),
            ("Configuration alertes", "Configuration des alertes"),
            ("Seuil d'alerte", "Seuil d'alerte"),
            ("Types d'alertes", "Types d'alertes"),
            ("Configuration rapports", "Configuration des rapports"),
            ("Rapport automatique", "Rapport automatique"),
            ("Format par d√©faut", "Format par d√©faut"),
            ("Heure de g√©n√©ration", "Heure de g√©n√©ration"),
            ("Configuration email", "Configuration des alertes par email"),
            ("Serveur SMTP", "Serveur SMTP"),
            ("Test configuration", "Tester la configuration"),
            ("Envoi alerte test", "Envoyer une alerte de test"),
            ("Param√®tres syst√®me", "Param√®tres syst√®me"),
            ("Sauvegarde BDD", "Sauvegarde de la base de donn√©es"),
            ("Vider cache", "Vider le cache"),
            ("R√©initialiser", "R√©initialiser les param√®tres"),
            ("Informations r√©seau", "Informations r√©seau"),
            ("Statut du scan", "Statut du scan"),
            ("Performance", "Performance"),
            ("Test des alertes", "Test des alertes"),
            ("Aide configuration", "Aide configuration email"),
            ("Formulaires", "Sauvegarder les param√®tres"),
            ("Boutons d'action", "Tester une alerte"),
            ("Statistiques rapports", "Statistiques des rapports")
        ]
        
        print("‚úÖ Fonctionnalit√©s disponibles:")
        for feature_name, search_text in features:
            if search_text in content:
                print(f"   ‚Ä¢ {feature_name}")
            else:
                print(f"   ‚ùå {feature_name} (manquant)")
    else:
        print(f"‚ùå Impossible d'acc√©der √† la page: {response.status_code}")

def demonstrate_settings_categories():
    """Expliquer les cat√©gories de param√®tres"""
    print("\nüìã CAT√âGORIES DE PARAM√àTRES")
    print("-" * 40)
    
    categories = {
        "R√©seau": {
            "description": "Configuration du scan et de la surveillance r√©seau",
            "param√®tres": [
                "Plage r√©seau √† scanner (CIDR)",
                "Intervalle de scan automatique",
                "Timeout de scan par appareil",
                "Nombre de tentatives",
                "Activation du scan automatique"
            ]
        },
        "Alertes": {
            "description": "Configuration des seuils et types d'alertes",
            "param√®tres": [
                "Seuil de disponibilit√© pour alerte",
                "Types d'alertes √† activer",
                "Email de destination pour alertes simples",
                "Configuration SMTP compl√®te"
            ]
        },
        "Rapports": {
            "description": "Configuration de la g√©n√©ration automatique de rapports",
            "param√®tres": [
                "Type de rapport automatique",
                "Format par d√©faut (PDF/Excel)",
                "Heure de g√©n√©ration",
                "P√©riode de r√©tention",
                "Inclusion de graphiques et alertes"
            ]
        },
        "Email": {
            "description": "Configuration compl√®te des alertes par email",
            "param√®tres": [
                "Serveur SMTP et port",
                "Authentification (utilisateur/mot de passe)",
                "Email d'exp√©dition et de destination",
                "Test de configuration",
                "Envoi d'alertes de test"
            ]
        },
        "Syst√®me": {
            "description": "Actions de maintenance et informations syst√®me",
            "param√®tres": [
                "Sauvegarde de la base de donn√©es",
                "Nettoyage du cache",
                "R√©initialisation des param√®tres",
                "Informations syst√®me (version, statut)"
            ]
        }
    }
    
    for category, info in categories.items():
        print(f"\nüîß {category}")
        print(f"   Description: {info['description']}")
        print(f"   Param√®tres:")
        for param in info['param√®tres']:
            print(f"     ‚Ä¢ {param}")

def main():
    """Fonction principale"""
    print("üöÄ D√âMONSTRATION DE LA PAGE PARAM√àTRES")
    print("=" * 60)
    
    # Connexion
    cookies = login()
    if not cookies:
        return
    
    # Aper√ßu des param√®tres actuels
    display_settings_overview(cookies)
    
    # D√©monstration des cat√©gories
    demonstrate_settings_categories()
    
    # D√©monstration des fonctionnalit√©s de la page
    demonstrate_page_features(cookies)
    
    # D√©monstrations sp√©cifiques
    demonstrate_network_settings(cookies)
    demonstrate_network_testing(cookies)
    demonstrate_alert_settings(cookies)
    demonstrate_email_configuration(cookies)
    demonstrate_test_alerts(cookies)
    demonstrate_report_settings(cookies)
    demonstrate_system_actions(cookies)
    
    print("\n" + "=" * 60)
    print("‚úÖ D√âMONSTRATION TERMIN√âE")
    print("\nüéØ Points cl√©s de la page Param√®tres:")
    print("   ‚Ä¢ Configuration compl√®te du r√©seau de surveillance")
    print("   ‚Ä¢ Gestion des alertes et seuils")
    print("   ‚Ä¢ Configuration email pour notifications")
    print("   ‚Ä¢ Param√®tres de g√©n√©ration de rapports")
    print("   ‚Ä¢ Actions de maintenance syst√®me")
    print("   ‚Ä¢ Tests et validation des configurations")
    print("   ‚Ä¢ Interface intuitive et organis√©e")
    print("   ‚Ä¢ Sauvegarde et restauration des param√®tres")

if __name__ == "__main__":
    main() 