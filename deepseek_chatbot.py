#!/usr/bin/env python3
"""
Module d'int√©gration DeepSeek API pour le chatbot intelligent
"""

import os
import json
import requests
from typing import Dict, List, Any, Optional
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class DeepSeekChatbot:
    """Chatbot intelligent utilisant l'API DeepSeek"""
    
    def __init__(self, api_key: Optional[str] = None):
        """
        Initialise le chatbot DeepSeek
        
        Args:
            api_key: Cl√© API DeepSeek (peut √™tre dans les variables d'environnement)
        """
        self.api_key = api_key or os.getenv('DEEPSEEK_API_KEY')
        self.api_url = "https://api.deepseek.com/v1/chat/completions"
        self.model = "deepseek-chat"
        self.max_tokens = 1000
        self.temperature = 0.7
        
        # Contexte syst√®me pour le chatbot
        self.system_prompt = """Tu es un assistant IA sp√©cialis√© dans la supervision r√©seau pour Central Danone. 
Tu as acc√®s aux donn√©es en temps r√©el du r√©seau et tu peux aider les techniciens avec :

1. **Analyse de la sant√© r√©seau** : Score de sant√©, √©quipements en ligne/hors ligne
2. **D√©tection de probl√®mes** : Alertes actives, √©quipements critiques
3. **Optimisations** : Recommandations d'am√©lioration bas√©es sur les donn√©es
4. **S√©curit√©** : Menaces d√©tect√©es, niveau de s√©curit√©
5. **Performance** : Analyse des performances r√©seau
6. **Maintenance** : Conseils de maintenance pr√©dictive

Tu dois toujours :
- R√©pondre en fran√ßais
- √ätre pr√©cis et professionnel
- Utiliser les donn√©es fournies pour tes r√©ponses
- Donner des conseils pratiques et actionnables
- √ätre concis mais informatif

Format de r√©ponse : Sois direct, utilise des emojis appropri√©s, et donne des informations chiffr√©es quand possible."""

    def is_configured(self) -> bool:
        """V√©rifie si l'API est configur√©e"""
        return bool(self.api_key)
    
    def get_network_context(self, devices: List[Dict], alerts: List[Dict]) -> str:
        """
        G√©n√®re le contexte r√©seau pour l'IA
        
        Args:
            devices: Liste des √©quipements
            alerts: Liste des alertes actives
            
        Returns:
            Contexte format√© pour l'IA
        """
        if not devices:
            return "Aucun √©quipement surveill√© actuellement."
        
        # Statistiques des √©quipements
        total_devices = len(devices)
        online_devices = sum(1 for d in devices if d.get('is_online', False))
        offline_devices = total_devices - online_devices
        avg_health = sum(d.get('health_score', 0) for d in devices) / total_devices if devices else 0
        critical_devices = sum(1 for d in devices if d.get('maintenance_urgency') == 'critical')
        
        # Alertes actives
        active_alerts = len([a for a in alerts if not a.get('is_resolved', True)])
        
        context = f"""
CONTEXTE R√âSEAU ACTUEL (Donn√©es en temps r√©el) :

üìä √âQUIPEMENTS :
- Total surveill√©s : {total_devices}
- En ligne : {online_devices}
- Hors ligne : {offline_devices}
- Score de sant√© moyen : {avg_health:.1f}%
- √âquipements critiques : {critical_devices}

üö® ALERTES :
- Alertes actives : {active_alerts}

üìã D√âTAILS √âQUIPEMENTS :
"""
        
        # Ajouter les d√©tails des √©quipements critiques
        critical_list = [d for d in devices if d.get('maintenance_urgency') == 'critical']
        if critical_list:
            context += "\n√âQUIPEMENTS CRITIQUES :\n"
            for device in critical_list[:5]:  # Limiter √† 5
                context += f"- {device.get('hostname', 'Unknown')} ({device.get('ip', 'N/A')}) - Sant√©: {device.get('health_score', 0):.1f}%\n"
        
        # Ajouter les alertes r√©centes
        if alerts:
            context += "\nALERTES R√âCENTES :\n"
            for alert in alerts[:3]:  # Limiter √† 3
                context += f"- {alert.get('message', 'N/A')}\n"
        
        return context
    
    def chat(self, message: str, devices: List[Dict] = None, alerts: List[Dict] = None) -> Dict[str, Any]:
        """
        Envoie un message au chatbot DeepSeek
        
        Args:
            message: Message de l'utilisateur
            devices: Donn√©es des √©quipements (optionnel)
            alerts: Donn√©es des alertes (optionnel)
            
        Returns:
            R√©ponse du chatbot
        """
        if not self.is_configured():
            return {
                'success': False,
                'error': 'API DeepSeek non configur√©e. Veuillez d√©finir DEEPSEEK_API_KEY.',
                'fallback': True
            }
        
        try:
            # Pr√©parer le contexte r√©seau
            network_context = self.get_network_context(devices or [], alerts or [])
            
            # Construire le message complet
            full_message = f"{network_context}\n\nQuestion utilisateur : {message}"
            
            # Pr√©parer la requ√™te API
            headers = {
                'Authorization': f'Bearer {self.api_key}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'model': self.model,
                'messages': [
                    {'role': 'system', 'content': self.system_prompt},
                    {'role': 'user', 'content': full_message}
                ],
                'max_tokens': self.max_tokens,
                'temperature': self.temperature,
                'stream': False
            }
            
            # Appel API
            response = requests.post(
                self.api_url,
                headers=headers,
                json=data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                ai_response = result['choices'][0]['message']['content']
                
                return {
                    'success': True,
                    'response': ai_response,
                    'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'confidence': 0.95,
                    'model': self.model,
                    'tokens_used': result.get('usage', {}).get('total_tokens', 0)
                }
            else:
                error_msg = f"Erreur API DeepSeek: {response.status_code} - {response.text}"
                logger.error(error_msg)
                return {
                    'success': False,
                    'error': error_msg,
                    'fallback': True
                }
                
        except requests.exceptions.Timeout:
            error_msg = "Timeout de l'API DeepSeek"
            logger.error(error_msg)
            return {
                'success': False,
                'error': error_msg,
                'fallback': True
            }
        except requests.exceptions.RequestException as e:
            error_msg = f"Erreur de connexion DeepSeek: {str(e)}"
            logger.error(error_msg)
            return {
                'success': False,
                'error': error_msg,
                'fallback': True
            }
        except Exception as e:
            error_msg = f"Erreur inattendue: {str(e)}"
            logger.error(error_msg)
            return {
                'success': False,
                'error': error_msg,
                'fallback': True
            }
    
    def test_connection(self) -> Dict[str, Any]:
        """Teste la connexion √† l'API DeepSeek"""
        if not self.is_configured():
            return {
                'success': False,
                'error': 'API non configur√©e'
            }
        
        try:
            headers = {
                'Authorization': f'Bearer {self.api_key}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'model': self.model,
                'messages': [
                    {'role': 'user', 'content': 'Test de connexion'}
                ],
                'max_tokens': 10
            }
            
            response = requests.post(
                self.api_url,
                headers=headers,
                json=data,
                timeout=10
            )
            
            if response.status_code == 200:
                return {
                    'success': True,
                    'message': 'Connexion DeepSeek r√©ussie'
                }
            else:
                return {
                    'success': False,
                    'error': f'Erreur {response.status_code}: {response.text}'
                }
                
        except Exception as e:
            return {
                'success': False,
                'error': f'Erreur de connexion: {str(e)}'
            }

# Instance globale
deepseek_bot = DeepSeekChatbot() 