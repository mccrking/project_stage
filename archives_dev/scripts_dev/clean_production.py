#!/usr/bin/env python3
"""
Script de nettoyage pour l'environnement de production
Supprime toutes les donn√©es de d√©monstration et pr√©pare l'environnement pour des donn√©es r√©elles
"""

import os
import sys
from datetime import datetime

# Ajouter le r√©pertoire courant au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import app, db, Device, ScanHistory, Alert, AIModel

def clean_database():
    """Nettoie la base de donn√©es de toutes les donn√©es de d√©monstration"""
    print("üßπ NETTOYAGE DE LA BASE DE DONN√âES")
    print("=" * 50)
    
    with app.app_context():
        try:
            # Supprimer toutes les donn√©es
            print("üóëÔ∏è Suppression des donn√©es de d√©monstration...")
            
            # Supprimer dans l'ordre pour respecter les contraintes de cl√©s √©trang√®res
            ScanHistory.query.delete()
            print("   ‚úÖ Historique des scans supprim√©")
            
            Alert.query.delete()
            print("   ‚úÖ Alertes supprim√©es")
            
            Device.query.delete()
            print("   ‚úÖ √âquipements supprim√©s")
            
            AIModel.query.delete()
            print("   ‚úÖ Mod√®les IA supprim√©s")
            
            # Valider les changements
            db.session.commit()
            print("‚úÖ Base de donn√©es nettoy√©e avec succ√®s")
            
            # V√©rifier que la base est vide
            device_count = Device.query.count()
            scan_count = ScanHistory.query.count()
            alert_count = Alert.query.count()
            
            print(f"\nüìä √âtat de la base de donn√©es :")
            print(f"   ‚Ä¢ √âquipements : {device_count}")
            print(f"   ‚Ä¢ Scans : {scan_count}")
            print(f"   ‚Ä¢ Alertes : {alert_count}")
            
            if device_count == 0 and scan_count == 0 and alert_count == 0:
                print("‚úÖ Base de donn√©es pr√™te pour la production")
                print("\nüöÄ Vous pouvez maintenant :")
                print("   1. D√©marrer l'application : python app.py")
                print("   2. Effectuer un scan r√©seau pour d√©tecter les vrais √©quipements")
                print("   3. Les donn√©es seront collect√©es dynamiquement")
            else:
                print("‚ö†Ô∏è Certaines donn√©es persistent encore")
                
        except Exception as e:
            print(f"‚ùå Erreur lors du nettoyage : {e}")
            db.session.rollback()

def verify_production_ready():
    """V√©rifie que l'environnement est pr√™t pour la production"""
    print("\nüîç V√âRIFICATION DE L'ENVIRONNEMENT DE PRODUCTION")
    print("=" * 50)
    
    # V√©rifier les fichiers de configuration
    config_files = ['config.py', 'network_scanner.py', 'ai_enhancement.py']
    for file in config_files:
        if os.path.exists(file):
            print(f"‚úÖ {file} pr√©sent")
        else:
            print(f"‚ùå {file} manquant")
    
    # V√©rifier les r√©pertoires n√©cessaires
    directories = ['reports', 'logs', 'ai_models', 'static', 'templates']
    for directory in directories:
        if os.path.exists(directory):
            print(f"‚úÖ R√©pertoire {directory}/ pr√©sent")
        else:
            print(f"‚ùå R√©pertoire {directory}/ manquant")
    
    # V√©rifier les d√©pendances
    try:
        import flask
        import sqlalchemy
        import nmap
        import sklearn
        print("‚úÖ Toutes les d√©pendances Python sont install√©es")
    except ImportError as e:
        print(f"‚ùå D√©pendance manquante : {e}")

if __name__ == "__main__":
    print("üöÄ PR√âPARATION DE L'ENVIRONNEMENT DE PRODUCTION")
    print("=" * 60)
    print("Ce script va nettoyer la base de donn√©es et pr√©parer")
    print("l'environnement pour des donn√©es r√©elles de production.")
    print()
    
    response = input("Continuer ? (y/N) : ")
    if response.lower() in ['y', 'yes', 'oui']:
        clean_database()
        verify_production_ready()
        print("\nüéâ Environnement de production pr√™t !")
    else:
        print("‚ùå Op√©ration annul√©e") 