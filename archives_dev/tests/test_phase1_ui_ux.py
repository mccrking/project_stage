#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test Phase 1 - Interface Utilisateur et UX
Dashboard Danone - Am√©liorations
"""

import os
import sys
import json
import time
import requests
from datetime import datetime

class Phase1UITester:
    def __init__(self):
        self.base_url = "http://localhost:5000"
        self.session = requests.Session()
        self.test_results = []
        
    def log_test(self, test_name, status, message=""):
        """Enregistrer un r√©sultat de test"""
        result = {
            'test': test_name,
            'status': status,
            'message': message,
            'timestamp': datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        # Affichage color√©
        if status == 'PASS':
            print(f"‚úÖ {test_name}: {message}")
        elif status == 'FAIL':
            print(f"‚ùå {test_name}: {message}")
        else:
            print(f"‚ö†Ô∏è  {test_name}: {message}")
    
    def test_theme_system(self):
        """Tester le syst√®me de th√®mes"""
        print("\nüé® Test du syst√®me de th√®mes...")
        
        try:
            # V√©rifier que les fichiers CSS et JS existent
            css_file = "static/css/theme.css"
            js_file = "static/js/theme.js"
            
            if os.path.exists(css_file):
                self.log_test("Fichier CSS th√®me", "PASS", "Fichier theme.css trouv√©")
            else:
                self.log_test("Fichier CSS th√®me", "FAIL", "Fichier theme.css manquant")
            
            if os.path.exists(js_file):
                self.log_test("Fichier JS th√®me", "PASS", "Fichier theme.js trouv√©")
            else:
                self.log_test("Fichier JS th√®me", "FAIL", "Fichier theme.js manquant")
            
            # V√©rifier le contenu du fichier CSS
            with open(css_file, 'r', encoding='utf-8') as f:
                css_content = f.read()
                
            if '--danone-blue' in css_content:
                self.log_test("Variables CSS Danone", "PASS", "Variables de couleurs Danone d√©finies")
            else:
                self.log_test("Variables CSS Danone", "FAIL", "Variables de couleurs Danone manquantes")
            
            if '[data-theme="dark"]' in css_content:
                self.log_test("Mode sombre CSS", "PASS", "Styles mode sombre d√©finis")
            else:
                self.log_test("Mode sombre CSS", "FAIL", "Styles mode sombre manquants")
            
            # V√©rifier le contenu du fichier JS
            with open(js_file, 'r', encoding='utf-8') as f:
                js_content = f.read()
                
            if 'class ThemeManager' in js_content:
                self.log_test("Classe ThemeManager", "PASS", "Classe ThemeManager trouv√©e")
            else:
                self.log_test("Classe ThemeManager", "FAIL", "Classe ThemeManager manquante")
            
            if 'localStorage.setItem' in js_content:
                self.log_test("Persistance th√®me", "PASS", "Persistance localStorage impl√©ment√©e")
            else:
                self.log_test("Persistance th√®me", "FAIL", "Persistance localStorage manquante")
                
        except Exception as e:
            self.log_test("Syst√®me de th√®mes", "FAIL", f"Erreur: {str(e)}")
    
    def test_notification_system(self):
        """Tester le syst√®me de notifications"""
        print("\nüîî Test du syst√®me de notifications...")
        
        try:
            js_file = "static/js/theme.js"
            
            with open(js_file, 'r', encoding='utf-8') as f:
                js_content = f.read()
                
            if 'class NotificationManager' in js_content:
                self.log_test("Classe NotificationManager", "PASS", "Classe NotificationManager trouv√©e")
            else:
                self.log_test("Classe NotificationManager", "FAIL", "Classe NotificationManager manquante")
            
            if 'Notification.requestPermission' in js_content:
                self.log_test("Permissions notifications", "PASS", "Demande de permissions impl√©ment√©e")
            else:
                self.log_test("Permissions notifications", "FAIL", "Demande de permissions manquante")
            
            if 'showToastNotification' in js_content:
                self.log_test("Notifications toast", "PASS", "Notifications toast impl√©ment√©es")
            else:
                self.log_test("Notifications toast", "FAIL", "Notifications toast manquantes")
                
        except Exception as e:
            self.log_test("Syst√®me de notifications", "FAIL", f"Erreur: {str(e)}")
    
    def test_animation_system(self):
        """Tester le syst√®me d'animations"""
        print("\n‚ú® Test du syst√®me d'animations...")
        
        try:
            css_file = "static/css/theme.css"
            
            with open(css_file, 'r', encoding='utf-8') as f:
                css_content = f.read()
                
            if '@keyframes fadeIn' in css_content:
                self.log_test("Animation fadeIn", "PASS", "Animation fadeIn d√©finie")
            else:
                self.log_test("Animation fadeIn", "FAIL", "Animation fadeIn manquante")
            
            if '@keyframes slideIn' in css_content:
                self.log_test("Animation slideIn", "PASS", "Animation slideIn d√©finie")
            else:
                self.log_test("Animation slideIn", "FAIL", "Animation slideIn manquante")
            
            if '@keyframes pulse' in css_content:
                self.log_test("Animation pulse", "PASS", "Animation pulse d√©finie")
            else:
                self.log_test("Animation pulse", "FAIL", "Animation pulse manquante")
            
            if 'transition:' in css_content:
                self.log_test("Transitions CSS", "PASS", "Transitions CSS d√©finies")
            else:
                self.log_test("Transitions CSS", "FAIL", "Transitions CSS manquantes")
                
        except Exception as e:
            self.log_test("Syst√®me d'animations", "FAIL", f"Erreur: {str(e)}")
    
    def test_responsive_design(self):
        """Tester le design responsive"""
        print("\nüì± Test du design responsive...")
        
        try:
            css_file = "static/css/theme.css"
            
            with open(css_file, 'r', encoding='utf-8') as f:
                css_content = f.read()
                
            if '@media (max-width: 768px)' in css_content:
                self.log_test("Media queries mobile", "PASS", "Media queries mobile d√©finies")
            else:
                self.log_test("Media queries mobile", "FAIL", "Media queries mobile manquantes")
            
            if 'mobile-card' in css_content:
                self.log_test("Classes mobile", "PASS", "Classes CSS mobile d√©finies")
            else:
                self.log_test("Classes mobile", "FAIL", "Classes CSS mobile manquantes")
            
            if 'touch-device' in css_content:
                self.log_test("Support tactile", "PASS", "Support tactile impl√©ment√©")
            else:
                self.log_test("Support tactile", "FAIL", "Support tactile manquant")
                
        except Exception as e:
            self.log_test("Design responsive", "FAIL", f"Erreur: {str(e)}")
    
    def test_template_integration(self):
        """Tester l'int√©gration dans les templates"""
        print("\nüîó Test de l'int√©gration dans les templates...")
        
        try:
            base_template = "templates/base.html"
            
            with open(base_template, 'r', encoding='utf-8') as f:
                template_content = f.read()
                
            if 'theme.css' in template_content:
                self.log_test("Lien CSS th√®me", "PASS", "Lien vers theme.css dans le template")
            else:
                self.log_test("Lien CSS th√®me", "FAIL", "Lien vers theme.css manquant")
            
            if 'theme.js' in template_content:
                self.log_test("Lien JS th√®me", "PASS", "Lien vers theme.js dans le template")
            else:
                self.log_test("Lien JS th√®me", "FAIL", "Lien vers theme.js manquant")
            
            if 'theme-color' in template_content:
                self.log_test("Meta theme-color", "PASS", "Meta theme-color d√©finie")
            else:
                self.log_test("Meta theme-color", "FAIL", "Meta theme-color manquante")
                
        except Exception as e:
            self.log_test("Int√©gration templates", "FAIL", f"Erreur: {str(e)}")
    
    def test_logo_and_assets(self):
        """Tester les assets (logo, etc.)"""
        print("\nüñºÔ∏è Test des assets...")
        
        try:
            logo_file = "static/img/danone-logo.svg"
            
            if os.path.exists(logo_file):
                self.log_test("Logo Danone", "PASS", "Logo SVG Danone trouv√©")
                
                with open(logo_file, 'r', encoding='utf-8') as f:
                    logo_content = f.read()
                    
                if 'DANONE' in logo_content:
                    self.log_test("Contenu logo", "PASS", "Logo contient le texte DANONE")
                else:
                    self.log_test("Contenu logo", "FAIL", "Logo ne contient pas DANONE")
            else:
                self.log_test("Logo Danone", "FAIL", "Logo SVG Danone manquant")
            
            # V√©rifier la structure des dossiers
            static_dirs = ['static/css', 'static/js', 'static/img']
            for dir_path in static_dirs:
                if os.path.exists(dir_path):
                    self.log_test(f"Dossier {dir_path}", "PASS", f"Dossier {dir_path} trouv√©")
                else:
                    self.log_test(f"Dossier {dir_path}", "FAIL", f"Dossier {dir_path} manquant")
                    
        except Exception as e:
            self.log_test("Assets", "FAIL", f"Erreur: {str(e)}")
    
    def test_configuration_files(self):
        """Tester les fichiers de configuration"""
        print("\n‚öôÔ∏è Test des fichiers de configuration...")
        
        try:
            config_file = "config_advanced.py"
            
            if os.path.exists(config_file):
                self.log_test("Fichier config avanc√©e", "PASS", "Fichier config_advanced.py trouv√©")
                
                with open(config_file, 'r', encoding='utf-8') as f:
                    config_content = f.read()
                    
                if 'UI_CONFIG' in config_content:
                    self.log_test("Configuration UI", "PASS", "Configuration UI d√©finie")
                else:
                    self.log_test("Configuration UI", "FAIL", "Configuration UI manquante")
                
                if 'NOTIFICATION_CONFIG' in config_content:
                    self.log_test("Configuration notifications", "PASS", "Configuration notifications d√©finie")
                else:
                    self.log_test("Configuration notifications", "FAIL", "Configuration notifications manquante")
                
                if 'DANONE_COLORS' in config_content:
                    self.log_test("Couleurs Danone", "PASS", "Palette de couleurs Danone d√©finie")
                else:
                    self.log_test("Couleurs Danone", "FAIL", "Palette de couleurs Danone manquante")
            else:
                self.log_test("Fichier config avanc√©e", "FAIL", "Fichier config_advanced.py manquant")
                
        except Exception as e:
            self.log_test("Configuration", "FAIL", f"Erreur: {str(e)}")
    
    def run_all_tests(self):
        """Ex√©cuter tous les tests"""
        print("üöÄ PHASE 1 - Test des am√©liorations Interface Utilisateur et UX")
        print("=" * 70)
        
        self.test_theme_system()
        self.test_notification_system()
        self.test_animation_system()
        self.test_responsive_design()
        self.test_template_integration()
        self.test_logo_and_assets()
        self.test_configuration_files()
        
        # R√©sum√©
        print("\n" + "=" * 70)
        print("üìä R√âSUM√â DES TESTS")
        print("=" * 70)
        
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r['status'] == 'PASS'])
        failed_tests = len([r for r in self.test_results if r['status'] == 'FAIL'])
        
        print(f"Total des tests: {total_tests}")
        print(f"Tests r√©ussis: {passed_tests} ‚úÖ")
        print(f"Tests √©chou√©s: {failed_tests} ‚ùå")
        print(f"Taux de r√©ussite: {(passed_tests/total_tests)*100:.1f}%")
        
        if failed_tests == 0:
            print("\nüéâ TOUS LES TESTS SONT R√âUSSIS !")
            print("‚úÖ La Phase 1 (Interface Utilisateur et UX) est pr√™te !")
        else:
            print(f"\n‚ö†Ô∏è {failed_tests} test(s) ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
        
        # Sauvegarder les r√©sultats
        with open('test_results_phase1.json', 'w', encoding='utf-8') as f:
            json.dump(self.test_results, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÑ R√©sultats sauvegard√©s dans: test_results_phase1.json")
        
        return failed_tests == 0

def main():
    """Fonction principale"""
    tester = Phase1UITester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüöÄ Pr√™t pour la Phase 2 : Fonctionnalit√©s Avanc√©es de Monitoring")
    else:
        print("\nüîß Veuillez corriger les erreurs avant de passer √† la phase suivante")
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main()) 