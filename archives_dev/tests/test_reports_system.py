#!/usr/bin/env python3
"""
Script de test pour le syst√®me de g√©n√©ration de rapports
Teste toutes les fonctionnalit√©s de g√©n√©ration, t√©l√©chargement et gestion des rapports
"""

import requests
import json
import time
import os
from datetime import datetime

# Configuration
BASE_URL = "http://localhost:5000"
LOGIN_URL = f"{BASE_URL}/login"
REPORTS_URL = f"{BASE_URL}/reports"
API_GENERATE_URL = f"{BASE_URL}/api/reports/generate"
API_LIST_URL = f"{BASE_URL}/api/reports/list"
API_STATS_URL = f"{BASE_URL}/api/reports/stats"
API_DELETE_URL = f"{BASE_URL}/api/reports/delete"

# Identifiants de test
TEST_USERNAME = "admin"
TEST_PASSWORD = "admin123"

class ReportsSystemTester:
    def __init__(self):
        self.session = requests.Session()
        self.logged_in = False
        
    def login(self):
        """Se connecter √† l'application"""
        print("üîê Connexion √† l'application...")
        
        try:
            # R√©cup√©rer le token CSRF
            response = self.session.get(LOGIN_URL)
            if response.status_code != 200:
                print(f"‚ùå Impossible d'acc√©der √† la page de connexion: {response.status_code}")
                return False
            
            # Se connecter
            login_data = {
                'username': TEST_USERNAME,
                'password': TEST_PASSWORD
            }
            
            response = self.session.post(LOGIN_URL, data=login_data, allow_redirects=False)
            
            if response.status_code == 302:  # Redirection apr√®s connexion r√©ussie
                print("‚úÖ Connexion r√©ussie")
                self.logged_in = True
                return True
            else:
                print(f"‚ùå √âchec de la connexion: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la connexion: {e}")
            return False
    
    def test_reports_page_access(self):
        """Tester l'acc√®s √† la page des rapports"""
        print("\nüìÑ Test d'acc√®s √† la page des rapports...")
        
        try:
            response = self.session.get(REPORTS_URL)
            
            if response.status_code == 200:
                print("‚úÖ Page des rapports accessible")
                return True
            else:
                print(f"‚ùå Impossible d'acc√©der √† la page des rapports: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur lors de l'acc√®s √† la page des rapports: {e}")
            return False
    
    def test_reports_list_api(self):
        """Tester l'API de liste des rapports"""
        print("\nüìã Test de l'API de liste des rapports...")
        
        try:
            response = self.session.get(API_LIST_URL)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    reports = data.get('reports', [])
                    print(f"‚úÖ API de liste des rapports fonctionnelle - {len(reports)} rapports trouv√©s")
                    
                    if reports:
                        print("üìä Rapports disponibles:")
                        for report in reports[:3]:  # Afficher les 3 premiers
                            print(f"   - {report['filename']} ({report['type']}, {report['size']})")
                    else:
                        print("   Aucun rapport disponible")
                    
                    return True
                else:
                    print(f"‚ùå Erreur API: {data.get('error', 'Erreur inconnue')}")
                    return False
            else:
                print(f"‚ùå Erreur HTTP: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur lors du test de l'API de liste: {e}")
            return False
    
    def test_reports_stats_api(self):
        """Tester l'API de statistiques des rapports"""
        print("\nüìä Test de l'API de statistiques des rapports...")
        
        try:
            response = self.session.get(API_STATS_URL)
            
            if response.status_code == 200:
                data = response.json()
                if 'error' not in data:
                    print(f"‚úÖ API de statistiques fonctionnelle")
                    print(f"   - Total rapports: {data.get('total_reports', 0)}")
                    print(f"   - Rapports ce mois: {data.get('reports_this_month', 0)}")
                    print(f"   - Taille totale: {data.get('total_size_mb', 0):.2f} MB")
                    return True
                else:
                    print(f"‚ùå Erreur API: {data.get('error')}")
                    return False
            else:
                print(f"‚ùå Erreur HTTP: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur lors du test de l'API de statistiques: {e}")
            return False
    
    def test_generate_pdf_report(self):
        """Tester la g√©n√©ration d'un rapport PDF"""
        print("\nüìÑ Test de g√©n√©ration d'un rapport PDF...")
        
        try:
            report_data = {
                'type': 'daily',
                'format': 'pdf',
                'date_from': '2024-01-01',
                'date_to': '2024-12-31',
                'description': 'Rapport de test g√©n√©r√© automatiquement'
            }
            
            response = self.session.post(
                API_GENERATE_URL,
                json=report_data,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    filename = data.get('filename')
                    print(f"‚úÖ Rapport PDF g√©n√©r√© avec succ√®s: {filename}")
                    return filename
                else:
                    print(f"‚ùå Erreur lors de la g√©n√©ration: {data.get('message')}")
                    return None
            else:
                print(f"‚ùå Erreur HTTP: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration du rapport PDF: {e}")
            return None
    
    def test_generate_excel_report(self):
        """Tester la g√©n√©ration d'un rapport Excel"""
        print("\nüìä Test de g√©n√©ration d'un rapport Excel...")
        
        try:
            report_data = {
                'type': 'weekly',
                'format': 'excel',
                'date_from': '2024-01-01',
                'date_to': '2024-12-31',
                'description': 'Rapport Excel de test'
            }
            
            response = self.session.post(
                API_GENERATE_URL,
                json=report_data,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    filename = data.get('filename')
                    print(f"‚úÖ Rapport Excel g√©n√©r√© avec succ√®s: {filename}")
                    return filename
                else:
                    print(f"‚ùå Erreur lors de la g√©n√©ration: {data.get('message')}")
                    return None
            else:
                print(f"‚ùå Erreur HTTP: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration du rapport Excel: {e}")
            return None
    
    def test_download_report(self, filename):
        """Tester le t√©l√©chargement d'un rapport"""
        print(f"\n‚¨áÔ∏è Test de t√©l√©chargement du rapport: {filename}")
        
        try:
            download_url = f"{BASE_URL}/download/{filename}"
            response = self.session.get(download_url)
            
            if response.status_code == 200:
                print(f"‚úÖ T√©l√©chargement r√©ussi - Taille: {len(response.content)} bytes")
                return True
            else:
                print(f"‚ùå Erreur de t√©l√©chargement: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur lors du t√©l√©chargement: {e}")
            return False
    
    def test_delete_report(self, filename):
        """Tester la suppression d'un rapport"""
        print(f"\nüóëÔ∏è Test de suppression du rapport: {filename}")
        
        try:
            response = self.session.delete(f"{API_DELETE_URL}/{filename}")
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    print(f"‚úÖ Rapport supprim√© avec succ√®s")
                    return True
                else:
                    print(f"‚ùå Erreur lors de la suppression: {data.get('message')}")
                    return False
            else:
                print(f"‚ùå Erreur HTTP: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la suppression: {e}")
            return False
    
    def run_comprehensive_test(self):
        """Ex√©cuter tous les tests"""
        print("üöÄ D√©marrage des tests du syst√®me de rapports")
        print("=" * 50)
        
        # Test de connexion
        if not self.login():
            print("‚ùå Impossible de continuer sans connexion")
            return False
        
        # Test d'acc√®s √† la page
        if not self.test_reports_page_access():
            print("‚ö†Ô∏è Page des rapports inaccessible")
        
        # Test des APIs
        self.test_reports_list_api()
        self.test_reports_stats_api()
        
        # Test de g√©n√©ration de rapports
        pdf_filename = self.test_generate_pdf_report()
        excel_filename = self.test_generate_excel_report()
        
        # Attendre un peu pour la g√©n√©ration
        if pdf_filename or excel_filename:
            print("\n‚è≥ Attente de 3 secondes pour la g√©n√©ration...")
            time.sleep(3)
        
        # Test de t√©l√©chargement
        if pdf_filename:
            self.test_download_report(pdf_filename)
        
        if excel_filename:
            self.test_download_report(excel_filename)
        
        # Test de suppression (supprimer seulement le PDF de test)
        if pdf_filename:
            self.test_delete_report(pdf_filename)
        
        print("\n" + "=" * 50)
        print("‚úÖ Tests du syst√®me de rapports termin√©s")
        return True

def main():
    """Fonction principale"""
    print("üß™ Testeur du syst√®me de g√©n√©ration de rapports")
    print("Ce script teste toutes les fonctionnalit√©s de g√©n√©ration, t√©l√©chargement et gestion des rapports")
    print()
    
    # V√©rifier que l'application est en cours d'ex√©cution
    try:
        response = requests.get(f"{BASE_URL}/login", timeout=5)
        if response.status_code != 200:
            print("‚ùå L'application n'est pas accessible. Assurez-vous qu'elle est en cours d'ex√©cution.")
            print("   Commande: python app.py")
            return
    except requests.exceptions.RequestException:
        print("‚ùå Impossible de se connecter √† l'application. Assurez-vous qu'elle est en cours d'ex√©cution.")
        print("   Commande: python app.py")
        return
    
    # Ex√©cuter les tests
    tester = ReportsSystemTester()
    success = tester.run_comprehensive_test()
    
    if success:
        print("\nüéâ Tous les tests ont √©t√© ex√©cut√©s avec succ√®s!")
    else:
        print("\n‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez les logs ci-dessus.")

if __name__ == "__main__":
    main() 