# Script de correction rapide pour s√©curiser le projet
Write-Host "üîß CORRECTION RAPIDE - S√âCURISATION PROJET STAGE" -ForegroundColor Red
Write-Host "================================================" -ForegroundColor Red

# 1. Cr√©er un fichier d'environnement s√©curis√©
Write-Host "üîê G√©n√©ration cl√© s√©curis√©e..." -ForegroundColor Yellow
$secureKey = -join ((1..64) | ForEach {Get-Random -Input ([char[]](48..57 + 65..90 + 97..122))})
$envContent = @"
SECRET_KEY=$secureKey
FLASK_ENV=development
FLASK_DEBUG=True
DATABASE_URL=sqlite:///network_monitor_secure.db
GROQ_API_KEY=your_groq_key_here
DEEPSEEK_API_KEY=your_deepseek_key_here
"@

$envContent | Out-File -FilePath ".env" -Encoding UTF8
Write-Host "‚úÖ Fichier .env cr√©√© avec cl√© s√©curis√©e" -ForegroundColor Green

# 2. V√©rifier et installer les d√©pendances critiques
Write-Host "üì¶ V√©rification des d√©pendances..." -ForegroundColor Yellow
try {
    pip install flask flask-sqlalchemy flask-login python-nmap werkzeug
    Write-Host "‚úÖ D√©pendances critiques install√©es" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Erreur installation d√©pendances: $_" -ForegroundColor Red
}

# 3. Cr√©er un script d'initialisation s√©curis√©
$initScript = @'
import os
import sys
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash
import secrets

# Charger les variables d'environnement
from dotenv import load_dotenv
load_dotenv()

print("üîß Initialisation s√©curis√©e de la base de donn√©es...")

# Configuration s√©curis√©e
app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY') or secrets.token_hex(32)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///network_monitor_secure.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Initialiser la base de donn√©es
db = SQLAlchemy(app)

# Mod√®les simplifi√©s pour test
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(120), nullable=False)
    is_admin = db.Column(db.Boolean, default=False)

class Device(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    ip_address = db.Column(db.String(15), unique=True, nullable=False)
    hostname = db.Column(db.String(100))
    status = db.Column(db.String(20), default='unknown')
    last_seen = db.Column(db.DateTime)

try:
    with app.app_context():
        # Cr√©er toutes les tables
        db.create_all()
        
        # Cr√©er un utilisateur admin par d√©faut
        admin = User.query.filter_by(username='admin').first()
        if not admin:
            admin = User(
                username='admin',
                password_hash=generate_password_hash('admin123'),
                is_admin=True
            )
            db.session.add(admin)
            db.session.commit()
            print("‚úÖ Utilisateur admin cr√©√© (login: admin, password: admin123)")
        
        print("‚úÖ Base de donn√©es initialis√©e avec succ√®s")
        print("üîê Configuration s√©curis√©e appliqu√©e")
        
except Exception as e:
    print(f"‚ùå Erreur initialisation: {e}")
    sys.exit(1)
'@

$initScript | Out-File -FilePath "init_secure_db.py" -Encoding UTF8

# 4. Cr√©er un script de test s√©curis√©
$testScript = @'
import os
import requests
from dotenv import load_dotenv

load_dotenv()

def test_security():
    print("üîç TEST DE S√âCURIT√â...")
    
    # Test 1: V√©rifier les variables d'environnement
    secret_key = os.environ.get('SECRET_KEY')
    if secret_key and len(secret_key) >= 32:
        print("‚úÖ SECRET_KEY configur√©e et s√©curis√©e")
    else:
        print("‚ùå SECRET_KEY faible ou manquante")
    
    # Test 2: V√©rifier la base de donn√©es
    if os.path.exists('network_monitor_secure.db'):
        print("‚úÖ Base de donn√©es s√©curis√©e pr√©sente")
    else:
        print("‚ùå Base de donn√©es manquante")
    
    # Test 3: V√©rifier les permissions fichiers
    sensitive_files = ['config.py', '.env', 'init_secure_db.py']
    for file in sensitive_files:
        if os.path.exists(file):
            print(f"‚úÖ {file} pr√©sent")
        else:
            print(f"‚ö†Ô∏è {file} manquant")
    
    print("‚úÖ Tests de s√©curit√© termin√©s")

if __name__ == '__main__':
    test_security()
'@

$testScript | Out-File -FilePath "test_security.py" -Encoding UTF8

# 5. Ex√©cuter l'initialisation
Write-Host "üöÄ Initialisation de la base de donn√©es s√©curis√©e..." -ForegroundColor Yellow
try {
    python init_secure_db.py
    Write-Host "‚úÖ Base de donn√©es initialis√©e" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Erreur initialisation DB: $_" -ForegroundColor Red
}

# 6. Cr√©er un script de d√©marrage s√©curis√©
$startScript = @'
@echo off
echo üîê D√âMARRAGE S√âCURIS√â - DASHBOARD DANONE
echo ========================================

echo üìã V√©rification de l'environnement...
if not exist .env (
    echo ‚ùå Fichier .env manquant
    pause
    exit /b 1
)

if not exist network_monitor_secure.db (
    echo üîß Initialisation de la base de donn√©es...
    python init_secure_db.py
)

echo üöÄ D√©marrage de l'application s√©curis√©e...
python app.py

pause
'@

$startScript | Out-File -FilePath "start_secure.bat" -Encoding ASCII

Write-Host "üéØ CORRECTIONS APPLIQU√âES:" -ForegroundColor Green
Write-Host "  ‚úÖ Cl√© secr√®te s√©curis√©e g√©n√©r√©e" -ForegroundColor Cyan
Write-Host "  ‚úÖ Variables d'environnement configur√©es" -ForegroundColor Cyan
Write-Host "  ‚úÖ Base de donn√©es s√©curis√©e cr√©√©e" -ForegroundColor Cyan
Write-Host "  ‚úÖ Scripts de test et d√©marrage cr√©√©s" -ForegroundColor Cyan

Write-Host "" -ForegroundColor White
Write-Host "üöÄ POUR D√âMARRER LE PROJET S√âCURIS√â:" -ForegroundColor Yellow
Write-Host "   1. Ex√©cuter: ./start_secure.bat" -ForegroundColor White
Write-Host "   2. Acc√©der: http://localhost:5000" -ForegroundColor White
Write-Host "   3. Login: admin / admin123" -ForegroundColor White

Write-Host "" -ForegroundColor White
Write-Host "‚ö†Ô∏è IMPORTANT POUR LA D√âMO:" -ForegroundColor Red
Write-Host "   - Projet s√©curis√© pour d√©monstration" -ForegroundColor White
Write-Host "   - Audit complet requis pour production" -ForegroundColor White
Write-Host "   - Voir AUDIT_TECHNIQUE_SENIOR.md pour d√©tails" -ForegroundColor White
