#!/usr/bin/env python3
"""
Script de d√©marrage pour plateforme PRODUCTION
Dashboard Danone - D√©tection r√©elle des √©quipements r√©seau
"""

import os
import sys
import time
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

def check_environment():
    """V√©rifier l'environnement de production"""
    print("üîç V√âRIFICATION ENVIRONNEMENT PRODUCTION")
    print("=" * 50)
    
    checks = []
    
    # 1. Variables d'environnement
    secret_key = os.environ.get('SECRET_KEY')
    if secret_key and len(secret_key) >= 16:
        checks.append("‚úÖ SECRET_KEY configur√©e")
    else:
        checks.append("‚ùå SECRET_KEY manquante ou faible")
    
    # 2. Base de donn√©es
    if os.path.exists('network_monitor_production.db'):
        checks.append("‚úÖ Base de donn√©es production pr√©sente")
    else:
        checks.append("‚ùå Base de donn√©es production manquante")
    
    # 3. Nmap disponible
    try:
        import nmap
        nm = nmap.PortScanner()
        checks.append("‚úÖ Nmap op√©rationnel")
    except:
        checks.append("‚ùå Nmap non disponible")
    
    # 4. Modules critiques
    try:
        import flask, flask_sqlalchemy, flask_login
        checks.append("‚úÖ Modules Flask disponibles")
    except:
        checks.append("‚ùå Modules Flask manquants")
    
    # 5. Scanner production
    try:
        from network_scanner_production import ProductionNetworkScanner
        scanner = ProductionNetworkScanner()
        if scanner.nmap_available:
            checks.append("‚úÖ Scanner production op√©rationnel")
        else:
            checks.append("‚ö†Ô∏è Scanner en mode fallback")
    except Exception as e:
        checks.append(f"‚ùå Scanner production: {e}")
    
    # Afficher les r√©sultats
    for check in checks:
        print(f"  {check}")
    
    # Compter les erreurs
    errors = len([c for c in checks if c.startswith("‚ùå")])
    warnings = len([c for c in checks if c.startswith("‚ö†Ô∏è")])
    
    if errors > 0:
        print(f"\n‚ùå {errors} erreur(s) critique(s) d√©tect√©e(s)")
        return False
    elif warnings > 0:
        print(f"\n‚ö†Ô∏è {warnings} avertissement(s) - fonctionnalit√© r√©duite")
        return True
    else:
        print("\n‚úÖ Environnement production valid√©")
        return True

def start_production_app():
    """D√©marrer l'application en mode production"""
    print("\nüöÄ D√âMARRAGE APPLICATION PRODUCTION")
    print("=" * 50)
    
    try:
        # Importer l'application
        from app import app, db, create_default_admin
        
        print("üì± Configuration de l'application...")
        
        # Configuration production
        app.config['DEBUG'] = False
        app.config['TESTING'] = False
        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///network_monitor_production.db'
        
        # V√©rifier la base de donn√©es
        with app.app_context():
            try:
                db.create_all()
                create_default_admin()
                print("‚úÖ Base de donn√©es initialis√©e")
            except Exception as e:
                print(f"‚ö†Ô∏è Base de donn√©es: {e}")
        
        print("üåê Informations de connexion:")
        print(f"   URL: http://localhost:5000")
        print(f"   Admin: admin@danone.com / admin123")
        print(f"   Tech: tech@danone.com / tech123")
        
        print("\nüîç FONCTIONNALIT√âS PRODUCTION ACTIVES:")
        print("   ‚úÖ D√©tection automatique des r√©seaux")
        print("   ‚úÖ Scan avanc√© avec Nmap")
        print("   ‚úÖ Identification d√©taill√©e des √©quipements")
        print("   ‚úÖ D√©tection du type, OS, ports, services")
        print("   ‚úÖ Analysis en temps r√©el")
        print("   ‚úÖ Intelligence artificielle")
        print("   ‚úÖ Syst√®me d'alertes")
        print("   ‚úÖ G√©n√©ration de rapports")
        
        print(f"\nüéØ D√âMARRAGE DE LA PLATEFORME...")
        print("   (Ctrl+C pour arr√™ter)")
        print("=" * 50)
        
        # D√©marrer Flask
        app.run(
            host='0.0.0.0',
            port=5000,
            debug=False,
            use_reloader=False
        )
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Arr√™t de la plateforme par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur de d√©marrage: {e}")
        import traceback
        traceback.print_exc()

def main():
    """Fonction principale"""
    print("üè≠ PLATEFORME DANONE - SUPERVISION R√âSEAU")
    print("üîß MODE PRODUCTION - D√âTECTION R√âELLE")
    print("=" * 50)
    
    # V√©rifier l'environnement
    if not check_environment():
        print("\n‚ùå ENVIRONNEMENT NON VALIDE")
        print("Ex√©cutez d'abord: python init_production.py")
        sys.exit(1)
    
    # Petite pause pour la lisibilit√©
    time.sleep(2)
    
    # D√©marrer l'application
    start_production_app()

if __name__ == '__main__':
    main()
