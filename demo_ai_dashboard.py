#!/usr/bin/env python3
"""
D√©monstration compl√®te de la page AI Dashboard
"""
import requests
import json
import time
from datetime import datetime

def demo_ai_dashboard():
    """D√©monstration compl√®te des fonctionnalit√©s AI Dashboard"""
    base_url = "http://localhost:5000"
    
    print("üß† D√âMONSTRATION COMPL√àTE - AI Dashboard Central Danone")
    print("=" * 70)
    print(f"üïê D√©but de la d√©monstration: {datetime.now().strftime('%H:%M:%S')}")
    print()
    
    # 1. Connexion
    print("1Ô∏è‚É£ CONNEXION √Ä L'APPLICATION")
    print("-" * 40)
    session = requests.Session()
    login_data = {
        'username': 'admin',
        'password': 'admin123'
    }
    
    try:
        response = session.post(f"{base_url}/login", data=login_data)
        if response.status_code == 200:
            print("‚úÖ Connexion r√©ussie avec l'utilisateur admin")
        else:
            print(f"‚ùå √âchec de la connexion: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False
    
    # 2. √âtat initial du syst√®me
    print("\n2Ô∏è‚É£ √âTAT INITIAL DU SYST√àME")
    print("-" * 40)
    
    # Statistiques globales
    try:
        response = session.get(f"{base_url}/api/statistics")
        if response.status_code == 200:
            stats = response.json()
            print(f"üìä Statistiques r√©seau:")
            print(f"   ‚Ä¢ Total √©quipements: {stats['total_devices']}")
            print(f"   ‚Ä¢ √âquipements en ligne: {stats['online_devices']}")
            print(f"   ‚Ä¢ √âquipements hors ligne: {stats['offline_devices']}")
            print(f"   ‚Ä¢ Disponibilit√©: {stats['uptime_percentage']}%")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur r√©cup√©ration statistiques: {e}")
    
    # Statistiques IA
    try:
        response = session.get(f"{base_url}/api/ai/dashboard-stats")
        if response.status_code == 200:
            ai_stats = response.json()
            print(f"ü§ñ Statistiques IA:")
            print(f"   ‚Ä¢ Score de sant√© moyen: {ai_stats['avg_health_score']}%")
            print(f"   ‚Ä¢ √âquipements critiques: {ai_stats['critical_devices']}")
            print(f"   ‚Ä¢ √âquipements √† risque √©lev√©: {ai_stats['high_risk_devices_count']}")
            print(f"   ‚Ä¢ √âquipements avec anomalies: {ai_stats['anomaly_devices_count']}")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur r√©cup√©ration stats IA: {e}")
    
    # 3. D√©monstration des √©quipements √† risque
    print("\n3Ô∏è‚É£ √âQUIPEMENTS √Ä RISQUE √âLEV√â")
    print("-" * 40)
    
    try:
        response = session.get(f"{base_url}/api/ai/high-risk-devices")
        if response.status_code == 200:
            devices = response.json()
            print(f"üî¥ {len(devices)} √©quipements √† risque √©lev√© d√©tect√©s:")
            
            for i, device in enumerate(devices[:5], 1):  # Afficher les 5 premiers
                risk_percent = device['failure_probability'] * 100
                print(f"   {i}. {device['hostname'] or device['ip']}")
                print(f"      IP: {device['ip']} | Type: {device['device_type']}")
                print(f"      Risque de panne: {risk_percent:.1f}% | Sant√©: {device['health_score']:.1f}%")
                print()
            
            if len(devices) > 5:
                print(f"   ... et {len(devices) - 5} autres √©quipements")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur r√©cup√©ration √©quipements √† risque: {e}")
    
    # 4. D√©monstration des anomalies
    print("\n4Ô∏è‚É£ D√âTECTION D'ANOMALIES")
    print("-" * 40)
    
    try:
        response = session.get(f"{base_url}/api/ai/anomaly-devices")
        if response.status_code == 200:
            devices = response.json()
            if devices:
                print(f"‚ö†Ô∏è  {len(devices)} √©quipements avec comportements anormaux:")
                
                for i, device in enumerate(devices[:3], 1):  # Afficher les 3 premiers
                    print(f"   {i}. {device['hostname'] or device['ip']}")
                    print(f"      IP: {device['ip']} | Type: {device['device_type']}")
                    print(f"      Score anomalie: {device['anomaly_score']:.3f}")
                    print()
            else:
                print("‚úÖ Aucune anomalie d√©tect√©e - Syst√®me stable")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur r√©cup√©ration anomalies: {e}")
    
    # 5. D√©monstration de l'analyse IA d'un √©quipement
    print("\n5Ô∏è‚É£ ANALYSE IA D√âTAILL√âE")
    print("-" * 40)
    
    try:
        # R√©cup√©rer un √©quipement pour l'analyse
        response = session.get(f"{base_url}/api/devices")
        if response.status_code == 200:
            devices = response.json()
            if devices:
                device = devices[0]  # Premier √©quipement
                print(f"üîç Analyse IA de l'√©quipement: {device['hostname'] or device['ip']}")
                
                # Analyse IA
                response = session.get(f"{base_url}/api/device/{device['id']}/ai-analysis")
                if response.status_code == 200:
                    analysis = response.json()
                    if 'error' not in analysis:
                        print(f"   üìã Classification:")
                        print(f"      ‚Ä¢ Type: {analysis['classification']['device_type']}")
                        print(f"      ‚Ä¢ Confiance: {analysis['classification']['confidence']*100:.1f}%")
                        
                        print(f"   üîß Maintenance pr√©dictive:")
                        print(f"      ‚Ä¢ Probabilit√© de panne: {analysis['maintenance_analysis']['failure_probability']*100:.1f}%")
                        print(f"      ‚Ä¢ Urgence: {analysis['maintenance_analysis']['maintenance_urgency']}")
                        
                        print(f"   üö® D√©tection d'anomalies:")
                        print(f"      ‚Ä¢ Anomalie d√©tect√©e: {'Oui' if analysis['anomaly_analysis']['is_anomaly'] else 'Non'}")
                        print(f"      ‚Ä¢ Score anomalie: {analysis['anomaly_analysis']['anomaly_score']:.3f}")
                        
                        print(f"   üìä Scores globaux:")
                        print(f"      ‚Ä¢ Score de sant√©: {analysis['health_score']:.1f}%")
                        print(f"      ‚Ä¢ Confiance IA: {analysis['ai_confidence']*100:.1f}%")
                        
                        print(f"   üí° Recommandations ({len(analysis['recommendations'])}):")
                        for i, rec in enumerate(analysis['recommendations'][:3], 1):
                            print(f"      {i}. [{rec['priority'].upper()}] {rec['message']}")
                    else:
                        print(f"   ‚ùå Erreur analyse: {analysis['error']}")
                else:
                    print(f"   ‚ùå Erreur API analyse: {response.status_code}")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur analyse IA: {e}")
    
    # 6. D√©monstration des recommandations IA
    print("\n6Ô∏è‚É£ RECOMMANDATIONS IA")
    print("-" * 40)
    
    try:
        response = session.post(f"{base_url}/api/ai/recommendations")
        if response.status_code == 200:
            data = response.json()
            if data.get('status') == 'success':
                recommendations = data.get('recommendations', [])
                print(f"üí° {len(recommendations)} recommandations IA g√©n√©r√©es:")
                
                # Grouper par priorit√©
                by_priority = {}
                for rec in recommendations:
                    priority = rec['priority']
                    if priority not in by_priority:
                        by_priority[priority] = []
                    by_priority[priority].append(rec)
                
                for priority in ['critical', 'high', 'medium', 'low']:
                    if priority in by_priority:
                        print(f"   üî¥ {priority.upper()} ({len(by_priority[priority])}):")
                        for rec in by_priority[priority][:2]:  # Max 2 par priorit√©
                            print(f"      ‚Ä¢ {rec['message'][:60]}...")
                        if len(by_priority[priority]) > 2:
                            print(f"      ... et {len(by_priority[priority]) - 2} autres")
                        print()
            else:
                print(f"   ‚ö†Ô∏è  Erreur g√©n√©ration: {data.get('message', 'Erreur inconnue')}")
        else:
            print(f"   ‚ùå Erreur API recommandations: {response.status_code}")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur recommandations IA: {e}")
    
    # 7. D√©monstration de l'entra√Ænement IA
    print("\n7Ô∏è‚É£ ENTRA√éNEMENT DES MOD√àLES IA")
    print("-" * 40)
    
    print("üîÑ Lancement de l'entra√Ænement des mod√®les IA...")
    try:
        response = session.post(f"{base_url}/api/ai/train")
        if response.status_code == 200:
            data = response.json()
            if data.get('status') == 'success':
                print("‚úÖ Entra√Ænement IA lanc√© avec succ√®s")
                print("   ‚Ä¢ Les mod√®les se mettent √† jour en arri√®re-plan")
                print("   ‚Ä¢ Les nouvelles analyses utiliseront les mod√®les am√©lior√©s")
            else:
                print(f"   ‚ö†Ô∏è  Erreur entra√Ænement: {data.get('message', 'Erreur inconnue')}")
        else:
            print(f"   ‚ùå Erreur API entra√Ænement: {response.status_code}")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur entra√Ænement IA: {e}")
    
    # 8. R√©sum√© et conclusion
    print("\n8Ô∏è‚É£ R√âSUM√â DE LA D√âMONSTRATION")
    print("-" * 40)
    
    print("üéØ Fonctionnalit√©s d√©montr√©es:")
    print("   ‚úÖ Connexion s√©curis√©e √† l'application")
    print("   ‚úÖ Visualisation des statistiques r√©seau et IA")
    print("   ‚úÖ D√©tection des √©quipements √† risque √©lev√©")
    print("   ‚úÖ Identification des comportements anormaux")
    print("   ‚úÖ Analyse IA d√©taill√©e d'un √©quipement")
    print("   ‚úÖ G√©n√©ration de recommandations intelligentes")
    print("   ‚úÖ Entra√Ænement des mod√®les IA")
    
    print("\nüöÄ Avantages de l'AI Dashboard:")
    print("   ‚Ä¢ Surveillance proactive du r√©seau")
    print("   ‚Ä¢ D√©tection pr√©coce des probl√®mes")
    print("   ‚Ä¢ Recommandations d'actions concr√®tes")
    print("   ‚Ä¢ Interface intuitive et moderne")
    print("   ‚Ä¢ Mises √† jour en temps r√©el")
    print("   ‚Ä¢ Intelligence artificielle avanc√©e")
    
    print(f"\nüïê Fin de la d√©monstration: {datetime.now().strftime('%H:%M:%S')}")
    print("=" * 70)
    print("üéâ La page AI Dashboard est enti√®rement fonctionnelle !")
    
    return True

if __name__ == "__main__":
    demo_ai_dashboard() 