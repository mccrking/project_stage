#!/usr/bin/env python3
"""
Script de d√©monstration du syst√®me de g√©n√©ration de rapports
Montre toutes les fonctionnalit√©s disponibles et g√©n√®re des exemples
"""

import requests
import json
import time
import os
from datetime import datetime, timedelta

# Configuration
BASE_URL = "http://localhost:5000"
LOGIN_URL = f"{BASE_URL}/login"
API_GENERATE_URL = f"{BASE_URL}/api/reports/generate"
API_LIST_URL = f"{BASE_URL}/api/reports/list"
API_STATS_URL = f"{BASE_URL}/api/reports/stats"

# Identifiants de test
TEST_USERNAME = "admin"
TEST_PASSWORD = "admin123"

class ReportsSystemDemo:
    def __init__(self):
        self.session = requests.Session()
        self.logged_in = False
        
    def login(self):
        """Se connecter √† l'application"""
        print("üîê Connexion √† l'application...")
        
        try:
            login_data = {
                'username': TEST_USERNAME,
                'password': TEST_PASSWORD
            }
            
            response = self.session.post(LOGIN_URL, data=login_data, allow_redirects=False)
            
            if response.status_code == 302:
                print("‚úÖ Connexion r√©ussie")
                self.logged_in = True
                return True
            else:
                print(f"‚ùå √âchec de la connexion: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la connexion: {e}")
            return False
    
    def get_current_stats(self):
        """R√©cup√©rer les statistiques actuelles"""
        try:
            response = self.session.get(API_STATS_URL)
            if response.status_code == 200:
                return response.json()
            return None
        except:
            return None
    
    def generate_daily_report_pdf(self):
        """G√©n√©rer un rapport journalier PDF"""
        print("\nüìÑ G√©n√©ration d'un rapport journalier PDF...")
        
        report_data = {
            'type': 'daily',
            'format': 'pdf',
            'date_from': datetime.now().strftime('%Y-%m-%d'),
            'date_to': datetime.now().strftime('%Y-%m-%d'),
            'description': 'Rapport journalier automatique - Supervision r√©seau Central Danone'
        }
        
        return self._generate_report(report_data, "journalier PDF")
    
    def generate_weekly_report_excel(self):
        """G√©n√©rer un rapport hebdomadaire Excel"""
        print("\nüìä G√©n√©ration d'un rapport hebdomadaire Excel...")
        
        # Date de d√©but de la semaine (lundi)
        today = datetime.now()
        start_of_week = today - timedelta(days=today.weekday())
        end_of_week = start_of_week + timedelta(days=6)
        
        report_data = {
            'type': 'weekly',
            'format': 'excel',
            'date_from': start_of_week.strftime('%Y-%m-%d'),
            'date_to': end_of_week.strftime('%Y-%m-%d'),
            'description': 'Rapport hebdomadaire - Analyse compl√®te des performances r√©seau'
        }
        
        return self._generate_report(report_data, "hebdomadaire Excel")
    
    def generate_monthly_report_pdf(self):
        """G√©n√©rer un rapport mensuel PDF"""
        print("\nüìà G√©n√©ration d'un rapport mensuel PDF...")
        
        # Premier jour du mois
        today = datetime.now()
        start_of_month = today.replace(day=1)
        end_of_month = (start_of_month + timedelta(days=32)).replace(day=1) - timedelta(days=1)
        
        report_data = {
            'type': 'monthly',
            'format': 'pdf',
            'date_from': start_of_month.strftime('%Y-%m-%d'),
            'date_to': end_of_month.strftime('%Y-%m-%d'),
            'description': 'Rapport mensuel - Synth√®se compl√®te de la supervision r√©seau'
        }
        
        return self._generate_report(report_data, "mensuel PDF")
    
    def generate_custom_report_excel(self):
        """G√©n√©rer un rapport personnalis√© Excel"""
        print("\nüéØ G√©n√©ration d'un rapport personnalis√© Excel...")
        
        # P√©riode personnalis√©e (derniers 30 jours)
        end_date = datetime.now()
        start_date = end_date - timedelta(days=30)
        
        report_data = {
            'type': 'custom',
            'format': 'excel',
            'date_from': start_date.strftime('%Y-%m-%d'),
            'date_to': end_date.strftime('%Y-%m-%d'),
            'description': 'Rapport personnalis√© - Analyse des 30 derniers jours avec focus sur les anomalies'
        }
        
        return self._generate_report(report_data, "personnalis√© Excel")
    
    def _generate_report(self, report_data, report_type):
        """G√©n√©rer un rapport avec les donn√©es fournies"""
        try:
            response = self.session.post(
                API_GENERATE_URL,
                json=report_data,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    filename = data.get('filename')
                    print(f"‚úÖ Rapport {report_type} g√©n√©r√©: {filename}")
                    return filename
                else:
                    print(f"‚ùå Erreur lors de la g√©n√©ration: {data.get('message')}")
                    return None
            else:
                print(f"‚ùå Erreur HTTP: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration: {e}")
            return None
    
    def list_all_reports(self):
        """Lister tous les rapports disponibles"""
        print("\nüìã Liste de tous les rapports disponibles:")
        print("-" * 60)
        
        try:
            response = self.session.get(API_LIST_URL)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    reports = data.get('reports', [])
                    
                    if reports:
                        print(f"{'Nom du fichier':<40} {'Type':<8} {'Taille':<10} {'Date':<20}")
                        print("-" * 80)
                        
                        for report in reports:
                            filename = report['filename'][:38] + ".." if len(report['filename']) > 40 else report['filename']
                            print(f"{filename:<40} {report['type']:<8} {report['size']:<10} {report['created']:<20}")
                        
                        print(f"\nüìä Total: {len(reports)} rapports")
                    else:
                        print("   Aucun rapport disponible")
                    
                    return reports
                else:
                    print(f"‚ùå Erreur API: {data.get('error', 'Erreur inconnue')}")
                    return []
            else:
                print(f"‚ùå Erreur HTTP: {response.status_code}")
                return []
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration de la liste: {e}")
            return []
    
    def show_statistics(self):
        """Afficher les statistiques des rapports"""
        print("\nüìä Statistiques des rapports:")
        print("-" * 40)
        
        try:
            response = self.session.get(API_STATS_URL)
            
            if response.status_code == 200:
                data = response.json()
                if 'error' not in data:
                    print(f"üìÑ Total des rapports: {data.get('total_reports', 0)}")
                    print(f"üìÖ Rapports ce mois: {data.get('reports_this_month', 0)}")
                    print(f"üíæ Taille totale: {data.get('total_size_mb', 0):.2f} MB")
                    
                    if data.get('total_reports', 0) > 0:
                        avg_size = data.get('total_size_mb', 0) / data.get('total_reports', 1)
                        print(f"üìè Taille moyenne: {avg_size:.2f} MB")
                else:
                    print(f"‚ùå Erreur: {data.get('error')}")
            else:
                print(f"‚ùå Erreur HTTP: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des statistiques: {e}")
    
    def run_complete_demo(self):
        """Ex√©cuter la d√©monstration compl√®te"""
        print("üöÄ D√âMONSTRATION DU SYST√àME DE G√âN√âRATION DE RAPPORTS")
        print("=" * 60)
        print("Ce script d√©montre toutes les fonctionnalit√©s du syst√®me de rapports")
        print("de la plateforme de supervision r√©seau Central Danone.")
        print()
        
        # Connexion
        if not self.login():
            print("‚ùå Impossible de continuer sans connexion")
            return False
        
        # Statistiques initiales
        print("üìà √âTAT INITIAL DU SYST√àME")
        initial_stats = self.get_current_stats()
        if initial_stats:
            print(f"   Rapports existants: {initial_stats.get('total_reports', 0)}")
            print(f"   Taille totale: {initial_stats.get('total_size_mb', 0):.2f} MB")
        
        # G√©n√©ration de diff√©rents types de rapports
        print("\nüîÑ G√âN√âRATION DE RAPPORTS")
        print("=" * 40)
        
        generated_files = []
        
        # Rapport journalier PDF
        pdf_daily = self.generate_daily_report_pdf()
        if pdf_daily:
            generated_files.append(pdf_daily)
        
        # Rapport hebdomadaire Excel
        excel_weekly = self.generate_weekly_report_excel()
        if excel_weekly:
            generated_files.append(excel_weekly)
        
        # Rapport mensuel PDF
        pdf_monthly = self.generate_monthly_report_pdf()
        if pdf_monthly:
            generated_files.append(pdf_monthly)
        
        # Rapport personnalis√© Excel
        excel_custom = self.generate_custom_report_excel()
        if excel_custom:
            generated_files.append(excel_custom)
        
        # Attendre la g√©n√©ration
        if generated_files:
            print(f"\n‚è≥ Attente de 5 secondes pour la g√©n√©ration de {len(generated_files)} rapports...")
            time.sleep(5)
        
        # Statistiques apr√®s g√©n√©ration
        print("\nüìà √âTAT APR√àS G√âN√âRATION")
        final_stats = self.get_current_stats()
        if final_stats:
            new_reports = final_stats.get('total_reports', 0) - initial_stats.get('total_reports', 0)
            print(f"   Nouveaux rapports g√©n√©r√©s: {new_reports}")
            print(f"   Total actuel: {final_stats.get('total_reports', 0)}")
            print(f"   Taille totale: {final_stats.get('total_size_mb', 0):.2f} MB")
        
        # Liste des rapports
        self.list_all_reports()
        
        # Statistiques d√©taill√©es
        self.show_statistics()
        
        # R√©sum√©
        print("\n" + "=" * 60)
        print("‚úÖ D√âMONSTRATION TERMIN√âE")
        print(f"üìÑ Rapports g√©n√©r√©s: {len(generated_files)}")
        print("üéØ Fonctionnalit√©s test√©es:")
        print("   ‚úì G√©n√©ration de rapports PDF et Excel")
        print("   ‚úì Rapports journaliers, hebdomadaires, mensuels et personnalis√©s")
        print("   ‚úì Liste et statistiques des rapports")
        print("   ‚úì Gestion des fichiers de rapports")
        print()
        print("üìÅ Les rapports g√©n√©r√©s sont disponibles dans le dossier 'reports/'")
        print("üåê Acc√©dez √† l'interface web pour t√©l√©charger et g√©rer les rapports")
        
        return True

def main():
    """Fonction principale"""
    print("üé¨ D√©monstrateur du syst√®me de g√©n√©ration de rapports")
    print("Plateforme de supervision r√©seau - Central Danone")
    print()
    
    # V√©rifier que l'application est en cours d'ex√©cution
    try:
        response = requests.get(f"{BASE_URL}/login", timeout=5)
        if response.status_code != 200:
            print("‚ùå L'application n'est pas accessible.")
            print("   Assurez-vous qu'elle est en cours d'ex√©cution avec: python app.py")
            return
    except requests.exceptions.RequestException:
        print("‚ùå Impossible de se connecter √† l'application.")
        print("   Assurez-vous qu'elle est en cours d'ex√©cution avec: python app.py")
        return
    
    # Ex√©cuter la d√©monstration
    demo = ReportsSystemDemo()
    success = demo.run_complete_demo()
    
    if success:
        print("\nüéâ D√©monstration termin√©e avec succ√®s!")
        print("üí° Conseils d'utilisation:")
        print("   - Utilisez l'interface web pour une gestion compl√®te")
        print("   - Les rapports sont automatiquement organis√©s par type")
        print("   - Vous pouvez personnaliser les p√©riodes et descriptions")
        print("   - Les formats PDF et Excel sont disponibles")
    else:
        print("\n‚ö†Ô∏è La d√©monstration a rencontr√© des probl√®mes.")
        print("   V√©rifiez que l'application fonctionne correctement.")

if __name__ == "__main__":
    main() 