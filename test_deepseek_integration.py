#!/usr/bin/env python3
"""
Test de l'int√©gration DeepSeek API
"""

import os
import sys
import requests
from datetime import datetime

def test_deepseek_integration():
    """Test complet de l'int√©gration DeepSeek"""
    print("ü§ñ TEST D'INT√âGRATION DEEPSEEK API")
    print("=" * 50)
    
    # Test 1: V√©rification de la configuration
    print("\n1Ô∏è‚É£ V√©rification de la configuration...")
    
    try:
        from config_deepseek import DeepSeekConfig
        config_info = DeepSeekConfig.get_config_info()
        
        if config_info['api_configured']:
            print("   ‚úÖ API DeepSeek configur√©e")
            print(f"   üìã Mod√®le: {config_info['model']}")
            print(f"   üî¢ Max tokens: {config_info['max_tokens']}")
        else:
            print("   ‚ùå API DeepSeek non configur√©e")
            print("   üí° Cr√©ez un fichier .env avec DEEPSEEK_API_KEY=votre_cle")
            return False
            
    except ImportError as e:
        print(f"   ‚ùå Erreur import config: {e}")
        return False
    
    # Test 2: Test du module DeepSeek
    print("\n2Ô∏è‚É£ Test du module DeepSeek...")
    
    try:
        from deepseek_chatbot import deepseek_bot
        
        # Test de connexion
        connection_test = deepseek_bot.test_connection()
        
        if connection_test['success']:
            print("   ‚úÖ Connexion DeepSeek r√©ussie")
        else:
            print(f"   ‚ùå Erreur connexion: {connection_test['error']}")
            return False
            
    except ImportError as e:
        print(f"   ‚ùå Module DeepSeek non disponible: {e}")
        return False
    
    # Test 3: Test du chatbot avec donn√©es simul√©es
    print("\n3Ô∏è‚É£ Test du chatbot avec donn√©es simul√©es...")
    
    # Donn√©es simul√©es
    test_devices = [
        {
            'ip': '192.168.1.10',
            'hostname': 'Serveur-Production-01',
            'is_online': True,
            'health_score': 85.5,
            'maintenance_urgency': 'low',
            'device_type': 'server'
        },
        {
            'ip': '192.168.1.15',
            'hostname': 'Switch-Core-01',
            'is_online': False,
            'health_score': 45.2,
            'maintenance_urgency': 'critical',
            'device_type': 'switch'
        }
    ]
    
    test_alerts = [
        {
            'message': '√âquipement Switch-Core-01 hors ligne',
            'alert_type': 'offline',
            'priority': 'high',
            'is_resolved': False
        }
    ]
    
    # Test de questions
    test_questions = [
        "Bonjour, comment va le r√©seau ?",
        "Y a-t-il des probl√®mes ?",
        "Quels sont les √©quipements critiques ?",
        "Donne-moi des recommandations d'optimisation"
    ]
    
    for i, question in enumerate(test_questions, 1):
        print(f"\n   üí¨ Question {i}: {question}")
        
        try:
            result = deepseek_bot.chat(question, test_devices, test_alerts)
            
            if result['success']:
                print(f"   ‚úÖ R√©ponse: {result['response'][:100]}...")
                print(f"   üìä Confiance: {result['confidence']}")
                print(f"   üî¢ Tokens utilis√©s: {result.get('tokens_used', 'N/A')}")
            else:
                print(f"   ‚ùå Erreur: {result['error']}")
                
        except Exception as e:
            print(f"   ‚ùå Exception: {e}")
    
    # Test 4: Test de l'API Flask
    print("\n4Ô∏è‚É£ Test de l'API Flask...")
    
    base_url = "http://localhost:5000"
    
    try:
        # Test de connexion √† l'application
        response = requests.get(f"{base_url}/login", timeout=5)
        if response.status_code == 200:
            print("   ‚úÖ Application Flask accessible")
        else:
            print(f"   ‚ùå Application non accessible: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException:
        print("   ‚ùå Application non d√©marr√©e")
        print("   üí° D√©marrez l'application avec: python app.py")
        return False
    
    print("\n" + "=" * 50)
    print("üéâ TESTS TERMIN√âS")
    print("=" * 50)
    
    print("\nüìã R√âSUM√â:")
    print("‚úÖ Configuration DeepSeek v√©rifi√©e")
    print("‚úÖ Module DeepSeek fonctionnel")
    print("‚úÖ Chatbot avec donn√©es simul√©es op√©rationnel")
    print("‚úÖ API Flask accessible")
    
    print("\nüöÄ PROCHAINES √âTAPES:")
    print("1. Configurez votre cl√© API DeepSeek dans le fichier .env")
    print("2. Red√©marrez l'application")
    print("3. Testez le chatbot dans l'interface IA Avanc√©e")
    print("4. Profitez des r√©ponses intelligentes !")
    
    return True

def show_installation_instructions():
    """Affiche les instructions d'installation"""
    print("\n" + "=" * 50)
    print("üìñ INSTRUCTIONS D'INSTALLATION")
    print("=" * 50)
    
    try:
        from config_deepseek import INSTALLATION_INSTRUCTIONS
        print(INSTALLATION_INSTRUCTIONS)
    except ImportError:
        print("Module de configuration non disponible")

if __name__ == "__main__":
    success = test_deepseek_integration()
    
    if not success:
        show_installation_instructions()
        sys.exit(1) 