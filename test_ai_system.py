"""
Test complet du syst√®me Central Danone avec IA
V√©rifie l'installation et le fonctionnement de toutes les fonctionnalit√©s IA
"""

import os
import sys
import importlib
import subprocess
from datetime import datetime

def test_python_version():
    """Test de la version Python"""
    print("üêç Test de la version Python...")
    version = sys.version_info
    print(f"   Version: {version.major}.{version.minor}.{version.micro}")
    
    if version.major == 3 and version.minor >= 8:
        print("   ‚úÖ Version Python compatible")
        return True
    else:
        print("   ‚ùå Version Python incompatible (requis: Python 3.8+)")
        return False

def test_python_dependencies():
    """Test des d√©pendances Python"""
    print("\nüì¶ Test des d√©pendances Python...")
    
    required_packages = [
        'flask', 'sqlalchemy', 'numpy', 'pandas', 'sklearn', 
        'joblib', 'matplotlib', 'seaborn', 'plotly', 'torch',
        'transformers', 'scipy', 'schedule', 'fpdf2', 'openpyxl'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            importlib.import_module(package)
            print(f"   ‚úÖ {package}")
        except ImportError:
            print(f"   ‚ùå {package} - MANQUANT")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n   ‚ö†Ô∏è {len(missing_packages)} packages manquants")
        print("   Ex√©cutez: pip install -r requirements.txt")
        return False
    else:
        print("   ‚úÖ Toutes les d√©pendances sont install√©es")
        return True

def test_nmap_installation():
    """Test de l'installation de Nmap"""
    print("\nüîç Test de l'installation Nmap...")
    
    try:
        result = subprocess.run(['nmap', '--version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("   ‚úÖ Nmap install√© et fonctionnel")
            return True
        else:
            print("   ‚ùå Nmap install√© mais non fonctionnel")
            return False
    except FileNotFoundError:
        print("   ‚ö†Ô∏è Nmap non trouv√© - le mode fallback sera utilis√©")
        return True  # Pas critique car il y a un fallback
    except Exception as e:
        print(f"   ‚ùå Erreur lors du test Nmap: {e}")
        return False

def test_directory_structure():
    """Test de la structure des r√©pertoires"""
    print("\nüìÅ Test de la structure des r√©pertoires...")
    
    required_dirs = ['templates', 'reports', 'logs', 'ai_models']
    missing_dirs = []
    
    for directory in required_dirs:
        if os.path.exists(directory):
            print(f"   ‚úÖ {directory}/")
        else:
            print(f"   ‚ùå {directory}/ - MANQUANT")
            missing_dirs.append(directory)
    
    if missing_dirs:
        print(f"\n   Cr√©ation des r√©pertoires manquants...")
        for directory in missing_dirs:
            os.makedirs(directory, exist_ok=True)
            print(f"   ‚úÖ {directory}/ cr√©√©")
    
    return True

def test_application_modules():
    """Test des modules de l'application"""
    print("\nüîß Test des modules de l'application...")
    
    modules = [
        'app', 'network_scanner', 'report_generator', 'ai_enhancement'
    ]
    
    for module in modules:
        try:
            importlib.import_module(module)
            print(f"   ‚úÖ {module}.py")
        except ImportError as e:
            print(f"   ‚ùå {module}.py - ERREUR: {e}")
            return False
    
    return True

def test_ai_system():
    """Test du syst√®me IA"""
    print("\nüß† Test du syst√®me IA...")
    
    try:
        from ai_enhancement import ai_system
        
        # Test de la classification d'√©quipements
        classification = ai_system.device_classifier.classify_device(
            'SRV-TEST', 'Dell Inc.', '192.168.1.100'
        )
        print(f"   ‚úÖ Classification d'√©quipements: {classification['device_type']}")
        
        # Test de la d√©tection d'anomalies
        anomaly_detector = ai_system.anomaly_detector
        print(f"   ‚úÖ D√©tecteur d'anomalies initialis√©")
        
        # Test de la maintenance pr√©dictive
        maintenance_predictor = ai_system.maintenance_predictor
        print(f"   ‚úÖ Pr√©dicteur de maintenance initialis√©")
        
        # Test des recommandations
        recommendation_system = ai_system.recommendation_system
        print(f"   ‚úÖ Syst√®me de recommandations initialis√©")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur syst√®me IA: {e}")
        return False

def test_database_connection():
    """Test de la connexion √† la base de donn√©es"""
    print("\nüóÑÔ∏è Test de la base de donn√©es...")
    
    try:
        from app import app, db
        
        with app.app_context():
            # Test de connexion
            db.engine.execute("SELECT 1")
            print("   ‚úÖ Connexion √† la base de donn√©es")
            
            # Test de cr√©ation des tables
            db.create_all()
            print("   ‚úÖ Tables cr√©√©es/mises √† jour")
            
            return True
            
    except Exception as e:
        print(f"   ‚ùå Erreur base de donn√©es: {e}")
        return False

def test_flask_application():
    """Test de l'application Flask"""
    print("\nüåê Test de l'application Flask...")
    
    try:
        from app import app
        
        # Test de cr√©ation de l'application
        with app.test_client() as client:
            # Test de la route principale
            response = client.get('/')
            if response.status_code == 200:
                print("   ‚úÖ Application Flask fonctionnelle")
                return True
            else:
                print(f"   ‚ùå Erreur route principale: {response.status_code}")
                return False
                
    except Exception as e:
        print(f"   ‚ùå Erreur application Flask: {e}")
        return False

def test_network_scanner():
    """Test du scanner r√©seau"""
    print("\nüì° Test du scanner r√©seau...")
    
    try:
        from network_scanner import NetworkScanner
        
        scanner = NetworkScanner()
        
        # Test de validation d'adresse IP
        is_valid = scanner.is_valid_ip_range("192.168.1.0/24")
        if is_valid:
            print("   ‚úÖ Validation d'adresse IP")
        else:
            print("   ‚ùå Erreur validation d'adresse IP")
            return False
        
        # Test de scan local (localhost)
        print("   üîç Test de scan local...")
        devices = scanner.scan_network("127.0.0.1/32")
        print(f"   ‚úÖ Scan local termin√©: {len(devices)} √©quipements trouv√©s")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur scanner r√©seau: {e}")
        return False

def test_report_generator():
    """Test du g√©n√©rateur de rapports"""
    print("\nüìä Test du g√©n√©rateur de rapports...")
    
    try:
        from report_generator import ReportGenerator
        
        generator = ReportGenerator()
        
        # Test de donn√©es de rapport
        test_data = {
            'timestamp': datetime.now().isoformat(),
            'network_stats': {
                'total_devices': 10,
                'online_devices': 8,
                'offline_devices': 2,
                'availability_percentage': 80.0
            },
            'ai_insights': {
                'avg_health_score': 85.0,
                'critical_devices': 1,
                'high_risk_devices': 2,
                'anomaly_devices': 0
            },
            'recommendations': ['Test recommendation'],
            'devices_details': []
        }
        
        # Test de g√©n√©ration de rapport JSON
        report_path = generator.generate_ai_report(test_data)
        if report_path and os.path.exists(report_path):
            print("   ‚úÖ G√©n√©ration de rapport IA")
            os.remove(report_path)  # Nettoyer
        else:
            print("   ‚ùå Erreur g√©n√©ration rapport")
            return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur g√©n√©rateur de rapports: {e}")
        return False

def test_demo_data():
    """Test de cr√©ation des donn√©es de d√©monstration"""
    print("\nüé≠ Test des donn√©es de d√©monstration...")
    
    try:
        # Importer le script de d√©mo
        import demo_data_ai
        
        # Test de cr√©ation d'√©quipements
        devices = demo_data_ai.create_demo_devices()
        if devices:
            print(f"   ‚úÖ {len(devices)} √©quipements de d√©monstration cr√©√©s")
        else:
            print("   ‚ùå Erreur cr√©ation √©quipements")
            return False
        
        # Test de cr√©ation d'historique
        demo_data_ai.create_demo_scan_history(devices)
        print("   ‚úÖ Historique de scans cr√©√©")
        
        # Test d'analyse IA
        demo_data_ai.create_demo_ai_analysis(devices)
        print("   ‚úÖ Analyse IA appliqu√©e")
        
        # Test de cr√©ation d'alertes
        demo_data_ai.create_demo_alerts(devices)
        print("   ‚úÖ Alertes cr√©√©es")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur donn√©es de d√©monstration: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ TEST COMPLET DU SYST√àME CENTRAL DANONE AVEC IA")
    print("=" * 60)
    
    tests = [
        ("Version Python", test_python_version),
        ("D√©pendances Python", test_python_dependencies),
        ("Installation Nmap", test_nmap_installation),
        ("Structure r√©pertoires", test_directory_structure),
        ("Modules application", test_application_modules),
        ("Syst√®me IA", test_ai_system),
        ("Base de donn√©es", test_database_connection),
        ("Application Flask", test_flask_application),
        ("Scanner r√©seau", test_network_scanner),
        ("G√©n√©rateur rapports", test_report_generator),
        ("Donn√©es d√©mo", test_demo_data)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"   ‚ùå Erreur lors du test {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√© des tests
    print("\n" + "=" * 60)
    print("üìã R√âSUM√â DES TESTS:")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHOU√â"
        print(f"{status} - {test_name}")
        if result:
            passed += 1
    
    print("\n" + "=" * 60)
    print(f"üìä R√âSULTATS: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ TOUS LES TESTS SONT R√âUSSIS!")
        print("\nüöÄ Le syst√®me est pr√™t √† √™tre utilis√©:")
        print("   ‚Ä¢ Dashboard principal: http://localhost:5000")
        print("   ‚Ä¢ Dashboard IA: http://localhost:5000/ai-dashboard")
        print("   ‚Ä¢ Rapports: http://localhost:5000/reports")
        print("\nüí° Pour d√©marrer l'application:")
        print("   python app.py")
    else:
        print("‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â")
        print("\nüîß Actions recommand√©es:")
        print("   1. V√©rifiez l'installation des d√©pendances")
        print("   2. Installez Nmap si n√©cessaire")
        print("   3. V√©rifiez les permissions des r√©pertoires")
        print("   4. Relancez les tests apr√®s correction")
    
    print("=" * 60)

if __name__ == '__main__':
    main() 