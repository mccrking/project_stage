#!/usr/bin/env python3
"""
Script de test pour le syst√®me de supervision Central Danone
V√©rifie que toutes les d√©pendances et composants fonctionnent correctement
"""

import sys
import os
import importlib
import subprocess
from datetime import datetime

def print_header(title):
    """Affiche un en-t√™te de test"""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}")

def print_success(message):
    """Affiche un message de succ√®s"""
    print(f"‚úÖ {message}")

def print_error(message):
    """Affiche un message d'erreur"""
    print(f"‚ùå {message}")

def print_warning(message):
    """Affiche un message d'avertissement"""
    print(f"‚ö†Ô∏è {message}")

def print_info(message):
    """Affiche un message d'information"""
    print(f"‚ÑπÔ∏è {message}")

def test_python_version():
    """Teste la version de Python"""
    print_header("TEST DE LA VERSION PYTHON")
    
    version = sys.version_info
    print_info(f"Version Python d√©tect√©e: {version.major}.{version.minor}.{version.micro}")
    
    if version.major >= 3 and version.minor >= 8:
        print_success("Version Python compatible (3.8+)")
        return True
    else:
        print_error("Version Python incompatible. Requis: 3.8+")
        return False

def test_dependencies():
    """Teste les d√©pendances Python"""
    print_header("TEST DES D√âPENDANCES PYTHON")
    
    dependencies = [
        'flask',
        'flask_sqlalchemy', 
        'nmap',
        'schedule',
        'fpdf2',
        'openpyxl',
        'python_dotenv'
    ]
    
    all_ok = True
    
    for dep in dependencies:
        try:
            importlib.import_module(dep.replace('-', '_'))
            print_success(f"Module {dep} disponible")
        except ImportError:
            print_error(f"Module {dep} manquant")
            all_ok = False
    
    return all_ok

def test_nmap():
    """Teste l'installation de Nmap"""
    print_header("TEST DE NMAP")
    
    try:
        result = subprocess.run(['nmap', '--version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            version_line = result.stdout.split('\n')[0]
            print_success(f"Nmap install√©: {version_line}")
            return True
        else:
            print_error("Nmap install√© mais ne r√©pond pas correctement")
            return False
    except FileNotFoundError:
        print_warning("Nmap non trouv√© - le mode fallback sera utilis√©")
        return False
    except subprocess.TimeoutExpired:
        print_error("Timeout lors du test de Nmap")
        return False

def test_directories():
    """Teste la cr√©ation des dossiers n√©cessaires"""
    print_header("TEST DES DOSSIERS")
    
    directories = ['reports', 'logs', 'templates', 'static']
    all_ok = True
    
    for directory in directories:
        if os.path.exists(directory):
            print_success(f"Dossier {directory} existe")
        else:
            try:
                os.makedirs(directory, exist_ok=True)
                print_success(f"Dossier {directory} cr√©√©")
            except Exception as e:
                print_error(f"Impossible de cr√©er le dossier {directory}: {e}")
                all_ok = False
    
    return all_ok

def test_modules():
    """Teste les modules de l'application"""
    print_header("TEST DES MODULES DE L'APPLICATION")
    
    modules = ['network_scanner', 'report_generator']
    all_ok = True
    
    for module in modules:
        try:
            importlib.import_module(module)
            print_success(f"Module {module} import√© avec succ√®s")
        except ImportError as e:
            print_error(f"Erreur d'import du module {module}: {e}")
            all_ok = False
    
    return all_ok

def test_network_scanner():
    """Teste le scanner r√©seau"""
    print_header("TEST DU SCANNER R√âSEAU")
    
    try:
        from network_scanner import NetworkScanner
        scanner = NetworkScanner()
        
        # Test de validation de plage r√©seau
        test_ranges = ['192.168.1.0/24', '10.0.0.0/8', '172.16.0.0/12']
        for range_test in test_ranges:
            if scanner.validate_network_range(range_test):
                print_success(f"Plage r√©seau valide: {range_test}")
            else:
                print_error(f"Plage r√©seau invalide: {range_test}")
        
        # Test d'analyse r√©seau
        network_info = scanner.get_network_info('192.168.1.0/24')
        if network_info:
            print_success(f"Analyse r√©seau: {network_info['network']} - {network_info['usable_addresses']} adresses")
        else:
            print_error("√âchec de l'analyse r√©seau")
        
        return True
        
    except Exception as e:
        print_error(f"Erreur lors du test du scanner: {e}")
        return False

def test_report_generator():
    """Teste le g√©n√©rateur de rapports"""
    print_header("TEST DU G√âN√âRATEUR DE RAPPORTS")
    
    try:
        from report_generator import ReportGenerator
        generator = ReportGenerator()
        
        # Test de donn√©es d'exemple
        test_data = {
            'date': datetime.now().strftime('%Y-%m-%d'),
            'devices': [
                {
                    'ip': '192.168.1.1',
                    'hostname': 'router-test',
                    'status': 'online',
                    'last_seen': '2024-12-01 10:00:00'
                }
            ],
            'statistics': {
                'total_devices': 1,
                'online_devices': 1,
                'offline_devices': 0
            }
        }
        
        # Test de g√©n√©ration PDF
        try:
            generator.generate_pdf_report(test_data, 'test_report.pdf')
            if os.path.exists('reports/test_report.pdf'):
                print_success("G√©n√©ration PDF r√©ussie")
                os.remove('reports/test_report.pdf')  # Nettoyer
            else:
                print_error("Fichier PDF non cr√©√©")
        except Exception as e:
            print_error(f"Erreur g√©n√©ration PDF: {e}")
        
        # Test de g√©n√©ration Excel
        try:
            generator.generate_excel_report(test_data, 'test_report.xlsx')
            if os.path.exists('reports/test_report.xlsx'):
                print_success("G√©n√©ration Excel r√©ussie")
                os.remove('reports/test_report.xlsx')  # Nettoyer
            else:
                print_error("Fichier Excel non cr√©√©")
        except Exception as e:
            print_error(f"Erreur g√©n√©ration Excel: {e}")
        
        return True
        
    except Exception as e:
        print_error(f"Erreur lors du test du g√©n√©rateur: {e}")
        return False

def test_flask_app():
    """Teste l'application Flask"""
    print_header("TEST DE L'APPLICATION FLASK")
    
    try:
        # Test d'import de l'app
        from app import app
        
        # Test de cr√©ation de contexte
        with app.app_context():
            from app import db
            print_success("Contexte Flask cr√©√© avec succ√®s")
            
            # Test de cr√©ation de base de donn√©es
            try:
                db.create_all()
                print_success("Base de donn√©es cr√©√©e avec succ√®s")
            except Exception as e:
                print_error(f"Erreur cr√©ation base de donn√©es: {e}")
        
        return True
        
    except Exception as e:
        print_error(f"Erreur lors du test Flask: {e}")
        return False

def test_network_connectivity():
    """Teste la connectivit√© r√©seau"""
    print_header("TEST DE CONNECTIVIT√â R√âSEAU")
    
    try:
        import socket
        
        # Test de r√©solution DNS
        try:
            socket.gethostbyname('localhost')
            print_success("R√©solution DNS locale fonctionnelle")
        except Exception as e:
            print_error(f"Erreur r√©solution DNS: {e}")
        
        # Test de ping local
        try:
            result = subprocess.run(['ping', '-n', '1', '127.0.0.1'] if os.name == 'nt' else ['ping', '-c', '1', '127.0.0.1'],
                                  capture_output=True, timeout=5)
            if result.returncode == 0:
                print_success("Ping local fonctionnel")
            else:
                print_warning("Ping local √©chou√©")
        except Exception as e:
            print_warning(f"Test ping non disponible: {e}")
        
        return True
        
    except Exception as e:
        print_error(f"Erreur test connectivit√©: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üè≠ CENTRAL DANONE - TEST DU SYST√àME DE SUPERVISION")
    print(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    tests = [
        ("Version Python", test_python_version),
        ("D√©pendances Python", test_dependencies),
        ("Nmap", test_nmap),
        ("Dossiers", test_directories),
        ("Modules application", test_modules),
        ("Scanner r√©seau", test_network_scanner),
        ("G√©n√©rateur de rapports", test_report_generator),
        ("Application Flask", test_flask_app),
        ("Connectivit√© r√©seau", test_network_connectivity)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print_error(f"Erreur lors du test {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√©
    print_header("R√âSUM√â DES TESTS")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
    
    print(f"\nR√©sultat: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print_success("üéâ Tous les tests sont pass√©s! Le syst√®me est pr√™t.")
        print_info("Vous pouvez maintenant lancer l'application avec: python app.py")
        return 0
    else:
        print_error("‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 