#!/usr/bin/env python3
"""
Script de nettoyage pour passer en mode production Central Danone
Supprime toutes les donn√©es de d√©monstration et pr√©pare la base pour la production
"""

import os
import sys
from datetime import datetime

# Ajouter le r√©pertoire courant au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import app, db, Device, ScanHistory, Alert, AIModel

def clean_production_database():
    """Nettoie la base de donn√©es pour la production"""
    print("üßπ NETTOYAGE DE LA BASE DE DONN√âES CENTRAL DANONE")
    print("=" * 60)
    
    with app.app_context():
        try:
            # Compter les donn√©es actuelles
            device_count = Device.query.count()
            scan_count = ScanHistory.query.count()
            alert_count = Alert.query.count()
            model_count = AIModel.query.count()
            
            print(f"üìä Donn√©es actuelles:")
            print(f"   - √âquipements: {device_count}")
            print(f"   - Scans historiques: {scan_count}")
            print(f"   - Alertes: {alert_count}")
            print(f"   - Mod√®les IA: {model_count}")
            
            if device_count == 0:
                print("‚úÖ Base de donn√©es d√©j√† vide - pr√™te pour la production")
                return
            
            # Demander confirmation
            print("\n‚ö†Ô∏è  ATTENTION: Cette op√©ration va supprimer TOUTES les donn√©es de d√©monstration")
            print("   Seuls les mod√®les IA entra√Æn√©s seront conserv√©s")
            
            response = input("\n‚ùì Continuer le nettoyage ? (oui/non): ").lower().strip()
            
            if response not in ['oui', 'o', 'yes', 'y']:
                print("‚ùå Nettoyage annul√©")
                return
            
            print("\nüóëÔ∏è  Suppression des donn√©es de d√©monstration...")
            
            # Supprimer les alertes
            Alert.query.delete()
            print("   ‚úÖ Alertes supprim√©es")
            
            # Supprimer l'historique des scans
            ScanHistory.query.delete()
            print("   ‚úÖ Historique des scans supprim√©")
            
            # Supprimer les √©quipements de d√©monstration
            Device.query.delete()
            print("   ‚úÖ √âquipements supprim√©s")
            
            # Conserver les mod√®les IA
            print("   ‚úÖ Mod√®les IA conserv√©s")
            
            # Commit des changements
            db.session.commit()
            
            print("\n‚úÖ NETTOYAGE TERMIN√â")
            print("=" * 60)
            print("üéØ La base de donn√©es est maintenant pr√™te pour la production")
            print("üì° Lancez un scan r√©seau pour d√©tecter vos vrais √©quipements")
            print("üß† Les mod√®les IA s'entra√Æneront automatiquement avec les nouvelles donn√©es")
            
        except Exception as e:
            print(f"‚ùå Erreur lors du nettoyage: {str(e)}")
            db.session.rollback()

def backup_demo_data():
    """Sauvegarde les donn√©es de d√©monstration avant nettoyage"""
    print("üíæ SAUVEGARDE DES DONN√âES DE D√âMONSTRATION")
    print("=" * 60)
    
    with app.app_context():
        try:
            # Cr√©er un fichier de sauvegarde
            backup_file = f"backup_demo_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.sql"
            
            # Exporter les donn√©es (format simple)
            devices = Device.query.all()
            scans = ScanHistory.query.all()
            alerts = Alert.query.all()
            
            with open(backup_file, 'w', encoding='utf-8') as f:
                f.write("-- Sauvegarde des donn√©es de d√©monstration Central Danone\n")
                f.write(f"-- Date: {datetime.now().isoformat()}\n\n")
                
                f.write(f"-- √âquipements: {len(devices)}\n")
                for device in devices:
                    f.write(f"-- {device.ip} ({device.hostname})\n")
                
                f.write(f"\n-- Scans: {len(scans)}\n")
                f.write(f"-- Alertes: {len(alerts)}\n")
            
            print(f"‚úÖ Sauvegarde cr√©√©e: {backup_file}")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde: {str(e)}")

def main():
    """Fonction principale"""
    print("üè≠ CENTRAL DANONE - PASSAGE EN MODE PRODUCTION")
    print("=" * 60)
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if not os.path.exists('app.py'):
        print("‚ùå Erreur: Ce script doit √™tre ex√©cut√© depuis le r√©pertoire du projet")
        return
    
    # Options
    print("Options disponibles:")
    print("1. Nettoyer la base de donn√©es (supprimer les donn√©es de d√©monstration)")
    print("2. Sauvegarder les donn√©es de d√©monstration")
    print("3. Nettoyer ET sauvegarder")
    print("4. Quitter")
    
    choice = input("\nChoisissez une option (1-4): ").strip()
    
    if choice == '1':
        clean_production_database()
    elif choice == '2':
        backup_demo_data()
    elif choice == '3':
        backup_demo_data()
        print()
        clean_production_database()
    elif choice == '4':
        print("üëã Au revoir!")
    else:
        print("‚ùå Option invalide")

if __name__ == '__main__':
    main() 